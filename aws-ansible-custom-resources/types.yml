tosca_definitions_version: alien_dsl_1_2_0

template_name: aws-ansible-custom-resources
template_author: Alien4cloud
template_version: 1.3.0-SNAPSHOT

imports:
  - tosca-normative-types:1.0.0-ALIEN12
  - alien-base-types:1.2.0-SNAPSHOT

data_types:
  alien.datatypes.ansible.AgentConfig:
    derived_from: tosca.datatypes.Root
    properties:
      install_method:
        type: string
        required: false
        default: remote
      user:
        type: string
        required: false
      key:
        type: string
        required: false
        default: "/root/.ssh/agent_key.pem"

node_types:
  alien.ansible.EC2Instance:
    description: |
      Launch an EC2 instance using Ansible.
    derived_from: tosca.nodes.Compute
    properties:
      agent_config:
        type: alien.datatypes.ansible.AgentConfig
        required: false  
      key_name:
        type: string
        required: true            
      aws_access_key_id:
        type: string
        required: true
      aws_secret_access_key:
        type: string
        required: true
      aws_default_region:
        type: string
        required: true
      image_id:
        type: string
        required: true
      instance_type:
        type: string
        required: true
      security_group_ids:
        type: string
        required: true
    attributes:
      ip_address: { get_operation_output: [ SELF, Standard, start, ip_address ] }
      instance_id: { get_operation_output: [ SELF, Standard, start, instance_id ] }
      #aws_resource_id: { get_operation_output: [ SELF, Standard, start, INSTANCE_ID ] }
      #placement: { get_operation_output: [ SELF, Standard, start, AVAILIBILITY_ZONE ] }
    capabilities:
      ec2instance:
        type: alien.ansible.capabilities.EC2Instance
    interfaces:
      Standard:
        start:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: start.yml
            key_name: { get_property: [ SELF, key_name ] }
            region: { get_property: [ SELF, aws_default_region ] }
            group: { get_property: [ SELF, security_group_ids ] }
            instance_type: { get_property: [ SELF, instance_type ] }
            image: { get_property: [ SELF, image_id ] }
            aws_access_key: { get_property: [ SELF, aws_access_key_id ] } 
            aws_secret_key: { get_property: [ SELF, aws_secret_access_key ] }   
          implementation: playbooks/EC2Instance/playbook.ansible
        stop:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: stop.yml
            key_name: { get_property: [ SELF, key_name ] }
            region: { get_property: [ SELF, aws_default_region ] }
            instance_id: { get_attribute: [ SELF, instance_id ] }
            aws_access_key: { get_property: [ SELF, aws_access_key_id ] } 
            aws_secret_key: { get_property: [ SELF, aws_secret_access_key ] }   
          implementation: playbooks/EC2Instance/playbook.ansible
        delete:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: delete.yml
            key_name: { get_property: [ SELF, key_name ] }
            region: { get_property: [ SELF, aws_default_region ] }
            instance_id: { get_attribute: [ SELF, instance_id ] }
            aws_access_key: { get_property: [ SELF, aws_access_key_id ] } 
            aws_secret_key: { get_property: [ SELF, aws_secret_access_key ] }   
          implementation: playbooks/EC2Instance/playbook.ansible

  alien.ansible.EC2ELB:
    description: |
      Launch an EC2 Elastic Load Balancer.
    tags:
      icon: /images/aws-elb.png      
    derived_from: tosca.nodes.Root
    properties:
      name:
        type: string
        required: true      
      aws_access_key_id:
        type: string
        required: true
      aws_secret_access_key:
        type: string
        required: true
      region:
        type: string
        required: true
      load_balancer_port:
        type: integer
        required: true
        default: 80      
      instance_port:
        type: integer
        required: true
        default: 80  
      zone:
        type: string
        required: true       
    attributes:
      dns_name: { get_operation_output: [ SELF, Standard, start, dns_name ] }
    requirements:
      - proxy: alien.ansible.capabilities.EC2Instance
        type: alien.ansible.relationships.ELBProxyEC2Instance
        lower_bound: 0
        upper_bound: unbounded
    interfaces:
      Standard:
        start:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: start.yml
            name: { get_property: [ SELF, name ] }
            load_balancer_port: { get_property: [ SELF, load_balancer_port ] }
            instance_port: { get_property: [ SELF, instance_port ] }
            region: { get_property: [ SELF, region ] }
            aws_access_key: { get_property: [ SELF, aws_access_key_id ] } 
            aws_secret_key: { get_property: [ SELF, aws_secret_access_key ] }  
            zone: { get_property: [ SELF, zone ] }
          implementation: playbooks/EC2ELB/playbook.ansible
        delete:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: delete.yml
            name: { get_property: [ SELF, name ] }
            region: { get_property: [ SELF, region ] }
            aws_access_key: { get_property: [ SELF, aws_access_key_id ] } 
            aws_secret_key: { get_property: [ SELF, aws_secret_access_key ] }   
          implementation: playbooks/EC2ELB/playbook.ansible
          
capability_types:
  alien.ansible.capabilities.EC2Instance:
    derived_from: tosca.capabilities.Root

relationship_types:
  alien.ansible.relationships.ELBProxyEC2Instance:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ alien.ansible.capabilities.EC2Instance ]
    interfaces:
      configure:
        add_target:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: add_target.yml
            lb_name: { get_property: [ SOURCE, name ] }
            instance_id: { get_attribute: [ TARGET, instance_id ] }
            region: { get_property: [ SOURCE, region ] }
            aws_access_key: { get_property: [ SOURCE, aws_access_key_id ] } 
            aws_secret_key: { get_property: [ SOURCE, aws_secret_access_key ] }  
          implementation: playbooks/ELBProxyEC2Instance/playbook.ansible
        remove_target:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: remove_target.yml
            lb_name: { get_property: [ SOURCE, name ] }
            instance_id: { get_attribute: [ TARGET, instance_id ] }
            region: { get_property: [ SOURCE, region ] }
            aws_access_key: { get_property: [ SOURCE, aws_access_key_id ] } 
            aws_secret_key: { get_property: [ SOURCE, aws_secret_access_key ] }  
          implementation: playbooks/ELBProxyEC2Instance/playbook.ansible
