tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.automation.topologies.load_tests_a4c_cfy4
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

description: >
  A4C & CFY 4 manager (with Ansible), both monitored (need a monitoring service to match).
  You'll need to provide the A4C dist package, eg. using the maven repo https://fastconnect.org/maven/content/repositories/fastconnect-snapshot  with artifact alien4cloud:alien4cloud-premium-dist:1.4.0-SNAPSHOT:dist@tar.gz
  Cloudify orchestrator is configured with a BYON location.
  The Host pool is fed with fresh EC2 instances.
  The apache installed on cfy compute is here to manager offline plugins but is not fed. You'll need to populate it and upload plugins onto manager to switch to offline mode
  Has been tested on a Centos ami-4c4b003b (m4.large) for CFY and Ubuntu ami-47a23a30 (t2.medium) for A4C.


imports:
  - org.alien4cloud.monitoring.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.storage.elasticsearch.ubuntu:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.manager.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.manager.v4:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.a4c.config.csar:1.4.0-SNAPSHOT
  - org.alien4cloud.lang.java.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.patches.amqp_client:1.0.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.hostpool.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.db.postgresql.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.www.apache.linux_ans:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.hostpool.awsfeeder:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.hostpool.service:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.a4c.config.orch.cfy:1.4.0-SNAPSHOT
  - org.alien4cloud.monitoring.diamond:1.4.0-SNAPSHOT
  - tosca-normative-types:1.0.0-ALIEN14
  - alien-base-types:1.4.0-SNAPSHOT
  - org.alien4cloud.lang.java.jmx.jolokia:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.a4c.config.orch.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.a4c.webapp:1.4.0-SNAPSHOT
  - org.alien4cloud.lang.java.jdk.linux:1.4.0-SNAPSHOT
  - org.alien4cloud.storage.elasticsearch.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.ansible:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.a4c.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.messaging.rabbitmq.pub:1.4.0-SNAPSHOT

topology_template:

  description: >
    A4C & CFY 4 manager (with Ansible), both monitored (need a monitoring service to match).
    You'll need to provide the A4C dist package, eg. using the maven repo https://fastconnect.org/maven/content/repositories/fastconnect-snapshot  with artifact alien4cloud:alien4cloud-premium-dist:1.4.0-SNAPSHOT:dist@tar.gz
    Cloudify orchestrator is configured with a BYON location.
    The Host pool is fed with fresh EC2 instances.
    The apache installed on cfy compute is here to manager offline plugins but is not fed. You'll need to populate it and upload plugins onto manager to switch to offline mode
    Has been tested on a Centos ami-4c4b003b (m4.large) for CFY and Ubuntu ami-47a23a30 (t2.medium) for A4C.

  inputs:
    aws_region:
      type: string
      required: true
      default: "eu-west-1"
      description: "The aws region to use to start aws instances."
    aws_access_key:
      type: string
      required: true
      description: "The aws access key of the account to use to start aws instances."
    aws_secret_key:
      type: string
      required: true
      description: "The aws secret key of the account to use to start aws instances."
    agent_security_groups:
      type: string
      required: true
      default: "sg-cffd98b6"
      description: "Comma separated list of security groups to use for agents."
    hostpool_instance_username:
      type: string
      required: true
      default: ubuntu
      description: "The user to use to connect to the instance"
    hostpool_instance_type:
      type: string
      required: true
      default: "t2.nano"
      description: "The AWS instance type"
    hostpool_instance_count:
      type: integer
      required: true
      default: 1
      description: "Number of instances to start"
    hostpool_instance_image:
      type: string
      required: true
      default: "ami-47a23a30"
      description: "The AWS ami"
    hostpool_host_per_instance:
      type: integer
      required: true
      default: 1
      description: "Number of host to declare in hostpool per EC2 instance"
    aws_keypair_name:
      type: string
      required: false
      description: "Optional name of the key as known by the iaas (in case of iaas key)."
    aws_key_content:
      type: string
      required: true
      description: "The AWS key (mulitiline content)"
    a4c_version:
      type: version
      required: true
      description: "The version of A4C (important in create stage)."
  input_artifacts:
    aws_key_file:
        type: tosca.artifacts.File
    a4c_dist_package:
        type: tosca.artifacts.File
  node_templates:
    GraphiteBackend:
      type: org.alien4cloud.monitoring.pub.nodes.GraphiteBackend
      capabilities:
        metrics_backend:
          properties:
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
    A4C_JDK:
      type: org.alien4cloud.lang.java.jdk.linux.nodes.OracleJDK
      properties:
        java_url: "https://edelivery.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz"
        java_home: "/opt/java"
        component_version: "1.8.0-131-b11"
      requirements:
        - host:
            node: A4C_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    A4C_DiamondAgent:
      type: org.alien4cloud.monitoring.diamond.nodes.DiamondLinuxAgent
      requirements:
        - host:
            node: A4C_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
        - collec_jolokia:
            node: A4C
            capability: org.alien4cloud.automation.a4c.pub.capabilities.JolokiaA4CEndpoint
            relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondA4CCollector
        - collec_elasticsearch:
            node: A4C_ElasticSearch
            capability: org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI
            relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondCollectElasticSearch
        - metrics_backend:
            node: GraphiteBackend
            capability: org.alien4cloud.monitoring.pub.capabilities.GraphiteBackendEndpoint
            relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondLinuxAgentConnectsToGraphite
    A4C_Compute:
      type: tosca.nodes.Compute
      capabilities:
        os:
          properties:
            architecture: "x86_64"
            type: linux
            distribution: ubuntu
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    A4C:
      type: org.alien4cloud.automation.a4c.webapp.nodes.Alien4Cloud
      properties:
        context_root: "/"
        app_args: "--spring.profiles.active=security-demo,noApiDoc"
        component_version: { get_input: a4c_version }
        data_dir: "/opt/alien4coud/data"
      requirements:
        - elasticsearch:
            node: A4C_ElasticSearch
            capability: org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchTransportAPI
            relationship: org.alien4cloud.automation.a4c.webapp.relationships.AlienConnectToElasticSearch
        - java:
            node: A4C_JDK
            capability: org.alien4cloud.lang.java.pub.capabilities.JDK
            relationship: org.alien4cloud.lang.java.pub.relationships.JavaSoftwareHostedOnJDK
      capabilities:
        rest:
          properties:
            user: admin
            password: admin
            port: 8080
            protocol: http
            secure: false
            network_name: PRIVATE
            initiator: source
        jolokia:
          properties:
            port: 8778
      artifacts:
        alien_dist:
          file: { get_input_artifact: a4c_dist_package }
          type: tosca.artifacts.File
    A4C_ElasticSearch:
      type: org.alien4cloud.storage.elasticsearch.ubuntu.nodes.ElasticSearch
      properties:
        component_version: "1.7.0"
        elasticsearch_url: "https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.0.deb"
        cluster_name: escluster
      requirements:
        - java:
            node: A4C_JDK
            capability: org.alien4cloud.lang.java.pub.capabilities.JDK
            relationship: org.alien4cloud.lang.java.pub.relationships.JavaSoftwareHostedOnJDK
      capabilities:
        elasticsearch:
          properties:
            port: 9300
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        http:
          properties:
            port: 9200
            protocol: http
            secure: false
            network_name: PRIVATE
            initiator: source
    CFY_Compute:
      type: tosca.nodes.Compute
      capabilities:
        host:
          properties:
            num_cpus: 4
            mem_size: "4 GIB"
        os:
          properties:
            architecture: "x86_64"
            type: linux
            distribution: centos
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    CFY_DiamondAgent:
      type: org.alien4cloud.monitoring.diamond.nodes.DiamondLinuxAgent
      requirements:
        - metrics_backend:
            node: GraphiteBackend
            capability: org.alien4cloud.monitoring.pub.capabilities.GraphiteBackendEndpoint
            relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondLinuxAgentConnectsToGraphite
        - host:
            node: CFY_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
        - collec_rabbitmq:
            node: CloudifyManager
            capability: org.alien4cloud.messaging.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint
            relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondRabbitmqCollector
    AWSHostpoolFeeder:
      type: org.alien4cloud.automation.cloudify.hostpool.awsfeeder.nodes.AWSHostpoolFeeder
      properties:
        aws_access_key: { get_input: aws_access_key }
        aws_secret_key: { get_input: aws_secret_key }
        key_name: { get_input: aws_keypair_name }
        key_content: { get_input: aws_key_content }
        region: { get_input: aws_region }
        instance_groups: { get_input: agent_security_groups }
        instance_username: { get_input: hostpool_instance_username }
        instance_type: { get_input: hostpool_instance_type }
        instance_image: { get_input: hostpool_instance_image }
        instance_count: { get_input: hostpool_instance_count }
        host_per_instance: { get_input: hostpool_host_per_instance }
        instance_name: HostpoolInstance
        instance_os: linux
      requirements:
        - hostpool:
            node: HostPoolService
            capability: org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi
            relationship: org.alien4cloud.automation.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool
    HostPoolService:
      type: org.alien4cloud.automation.cloudify.hostpool.service.nodes.HostPoolService
      requirements:
        - host:
            node: CFY_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      capabilities:
        cloudify_hostpool:
          properties:
            protocol: http
            port: 8080
            secure: false
            network_name: PRIVATE
            initiator: source
    Ansible4CloudifyManager:
      type: org.alien4cloud.automation.cloudify.ansible.nodes.Ansible4CloudifyManager
      properties:
        component_version: "2.0.1.0"
      requirements:
        - host:
            node: CFY_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    OfflineApache:
      type: org.alien4cloud.www.apache.linux_ans.nodes.Apache
      requirements:
        - host:
            node: CFY_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      capabilities:
        data_endpoint:
          properties:
            protocol: http
            port: 8787
            secure: false
            network_name: PRIVATE
            initiator: source
        admin_endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    AddCsarExtended:
      type: org.alien4cloud.automation.a4c.config.csar.nodes.AddCsarFromGit
      properties:
        repositoryUrl: "https://github.com/alien4cloud/alien4cloud-extended-types.git"
        branchId: master
      requirements:
        - alien:
            node: A4C
            capability: org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi
            relationship: org.alien4cloud.automation.a4c.config.csar.relationships.AddCsarFromGitConnectToAlien
    AddCsarMock:
      type: org.alien4cloud.automation.a4c.config.csar.nodes.AddCsarFromGit
      properties:
        repositoryUrl: "https://github.com/alien4cloud/samples.git"
        branchId: master
        subPath: "org/alien4cloud/mock"
      requirements:
        - dependency:
            node: AddCsarExtended
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
        - alien:
            node: A4C
            capability: org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi
            relationship: org.alien4cloud.automation.a4c.config.csar.relationships.AddCsarFromGitConnectToAlien
    ByonLocationConfigurator:
      type: org.alien4cloud.automation.a4c.config.orch.cfy.nodes.ByonLocationConfigurator
      properties:
        type: byon
        resourceType: "alien.cloudify.byon.nodes.LinuxCompute"
        resourceName: PoolResource
        resourceArchiveName: "cloudify-byon-types"
        resourceArchiveVersion: "1.4.0"
        resourceAgentInstallMethod: none
        name: BYON
      requirements:
        - hostpool:
            node: HostPoolService
            capability: org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi
            relationship: org.alien4cloud.automation.a4c.config.orch.cfy.relationships.LocationConnectsToHostpool
        - orchestrator:
            node: OrchestratorConfigurator
            capability: org.alien4cloud.automation.a4c.config.orch.pub.capabilities.OrchestratorConfigurator
            relationship: org.alien4cloud.automation.a4c.config.orch.pub.relationships.LocationHostedOnOrchestrator
    OrchestratorConfigurator:
      type: org.alien4cloud.automation.a4c.config.orch.cfy.nodes.OrchestratorConfigurator
      properties:
        name: CFYOrchestrator
        pluginId: "alien-cloudify-4-orchestrator-premium"
        pluginBean: "cloudify-orchestrator"
        disableDiamondMonitorAgent: true
      requirements:
        - dependency:
            node: AddCsarMock
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
        - alien:
            node: A4C
            capability: org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi
            relationship: org.alien4cloud.automation.a4c.config.orch.pub.relationships.ConnectsToA4C
        - cfy:
            node: CloudifyManager
            capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3
            relationship: org.alien4cloud.automation.a4c.config.orch.cfy.relationships.ConnectsToCfy
    CloudifyManager:
      type: org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyManager
      properties:
        ssh_user: "ec2-user"
        ssh_key_filename: "aws-key.pem"
        keypair_name: { get_input: aws_keypair_name }
        agents_user: ubuntu
        admin_username: admin
        admin_password: admin
        component_version: "4.0.1-ga"
      requirements:
        - host:
            node: CFY_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      capabilities:
        rabbitmq_management:
          properties:
            user: cloudify
            password: c10udify
            protocol: http
            port: 15672
            secure: false
            network_name: PRIVATE
            initiator: source
        postgresql:
          properties:
            user: cloudify
            password: cloudify
            protocol: tcp
            port: 5432
            secure: false
            network_name: PRIVATE
            initiator: source
        cloudify_api_v3:
          properties:
            protocol: https
            port: 443
            secure: false
            network_name: PRIVATE
            initiator: source
      artifacts:
        key_file:
          file: { get_input_artifact: aws_key_file }
          type: tosca.artifacts.File
    CloudifyAwsConfiguration:
      type: org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyAwsConfiguration
      properties:
        aws_access_key: { get_input: aws_access_key }
        aws_secret_key: { get_input: aws_secret_key }
        aws_region: { get_input: aws_region }
        agent_security_groups: { get_input: agent_security_groups }
      requirements:
        - cfy_manager:
            node: CloudifyManager
            capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer
            relationship: tosca.relationships.HostedOn
    AmqpClientPatch:
      type: org.alien4cloud.automation.cloudify.patches.amqp_client.nodes.AmqpClientPatch
      requirements:
        - cfy_manager:
            node: CloudifyManager
            capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer
            relationship: tosca.relationships.HostedOn
  outputs:
    A4C_alien_url:
      value: { get_attribute: [ A4C, alien_url ] }
    HostPoolService_hostpool_url_hosts:
      value: { get_attribute: [ HostPoolService, hostpool_url_hosts ] }
    HostPoolService_hostpool_url:
      value: { get_attribute: [ HostPoolService, hostpool_url ] }
    CloudifyManager_manager_url:
      value: { get_attribute: [ CloudifyManager, manager_url ] }
  workflows:
    install:
      steps:
        Compute_install:
          node: A4C_Compute
          activity:
            delegate: install
          on-success:
            - DiamondLinuxAgent_initial
            - OracleJDK_initial
        OracleJDK_initial:
          node: A4C_JDK
          activity:
            set_state: initial
          on-success:
            - OracleJDK_creating
        OracleJDK_creating:
          node: A4C_JDK
          activity:
            set_state: creating
          on-success:
            - create_OracleJDK
        create_OracleJDK:
          node: A4C_JDK
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - OracleJDK_created
        OracleJDK_created:
          node: A4C_JDK
          activity:
            set_state: created
          on-success:
            - OracleJDK_configuring
        OracleJDK_configuring:
          node: A4C_JDK
          activity:
            set_state: configuring
          on-success:
            - configure_OracleJDK
        configure_OracleJDK:
          node: A4C_JDK
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - OracleJDK_configured
        OracleJDK_configured:
          node: A4C_JDK
          activity:
            set_state: configured
          on-success:
            - OracleJDK_starting
        OracleJDK_starting:
          node: A4C_JDK
          activity:
            set_state: starting
          on-success:
            - start_OracleJDK
        start_OracleJDK:
          node: A4C_JDK
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - OracleJDK_started
        OracleJDK_started:
          node: A4C_JDK
          activity:
            set_state: started
          on-success:
            - Alien4Cloud_initial
            - ElasticSearch_initial
        Alien4Cloud_initial:
          node: A4C
          activity:
            set_state: initial
          on-success:
            - Alien4Cloud_creating
        Alien4Cloud_creating:
          node: A4C
          activity:
            set_state: creating
          on-success:
            - create_Alien4Cloud
        create_Alien4Cloud:
          node: A4C
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - Alien4Cloud_created
        Alien4Cloud_created:
          node: A4C
          activity:
            set_state: created
          on-success:
            - Alien4Cloud_configuring
            - ElasticSearch_configuring
        Alien4Cloud_configuring:
          node: A4C
          activity:
            set_state: configuring
          on-success:
            - configure_Alien4Cloud
        configure_Alien4Cloud:
          node: A4C
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - Alien4Cloud_configured
        Alien4Cloud_configured:
          node: A4C
          activity:
            set_state: configured
          on-success:
            - Alien4Cloud_starting
        Alien4Cloud_starting:
          node: A4C
          activity:
            set_state: starting
          on-success:
            - start_Alien4Cloud
        start_Alien4Cloud:
          node: A4C
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - Alien4Cloud_started
        Alien4Cloud_started:
          node: A4C
          activity:
            set_state: started
          on-success:
            - AddCsarFromGit_configuring
            - AddCsarFromGit_configuring_1
            - ByonLocationConfigurator_initial
            - OrchestratorConfigurator_configuring
            - HostPoolService_configuring
            - DiamondLinuxAgent_configuring
        ElasticSearch_initial:
          node: A4C_ElasticSearch
          activity:
            set_state: initial
          on-success:
            - ElasticSearch_creating
        ElasticSearch_creating:
          node: A4C_ElasticSearch
          activity:
            set_state: creating
          on-success:
            - create_ElasticSearch
        create_ElasticSearch:
          node: A4C_ElasticSearch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - ElasticSearch_created
        ElasticSearch_created:
          node: A4C_ElasticSearch
          activity:
            set_state: created
          on-success:
            - Alien4Cloud_initial
            - ElasticSearch_configuring
        ElasticSearch_configuring:
          node: A4C_ElasticSearch
          activity:
            set_state: configuring
          on-success:
            - configure_ElasticSearch
        configure_ElasticSearch:
          node: A4C_ElasticSearch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - ElasticSearch_configured
        ElasticSearch_configured:
          node: A4C_ElasticSearch
          activity:
            set_state: configured
          on-success:
            - ElasticSearch_starting
        ElasticSearch_starting:
          node: A4C_ElasticSearch
          activity:
            set_state: starting
          on-success:
            - start_ElasticSearch
        start_ElasticSearch:
          node: A4C_ElasticSearch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - ElasticSearch_started
        ElasticSearch_started:
          node: A4C_ElasticSearch
          activity:
            set_state: started
          on-success:
            - Alien4Cloud_configuring
            - DiamondLinuxAgent_configuring
        DiamondLinuxAgent_initial:
          node: A4C_DiamondAgent
          activity:
            set_state: initial
          on-success:
            - DiamondLinuxAgent_creating
        DiamondLinuxAgent_creating:
          node: A4C_DiamondAgent
          activity:
            set_state: creating
          on-success:
            - create_DiamondLinuxAgent
        create_DiamondLinuxAgent:
          node: A4C_DiamondAgent
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - DiamondLinuxAgent_created
        DiamondLinuxAgent_created:
          node: A4C_DiamondAgent
          activity:
            set_state: created
          on-success:
            - ElasticSearch_configuring
            - Alien4Cloud_configuring
            - OracleJDK_initial
            - DiamondLinuxAgent_configuring
        DiamondLinuxAgent_configuring:
          node: A4C_DiamondAgent
          activity:
            set_state: configuring
          on-success:
            - configure_DiamondLinuxAgent
        configure_DiamondLinuxAgent:
          node: A4C_DiamondAgent
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - DiamondLinuxAgent_configured
        DiamondLinuxAgent_configured:
          node: A4C_DiamondAgent
          activity:
            set_state: configured
          on-success:
            - DiamondLinuxAgent_starting
        DiamondLinuxAgent_starting:
          node: A4C_DiamondAgent
          activity:
            set_state: starting
          on-success:
            - start_DiamondLinuxAgent
        start_DiamondLinuxAgent:
          node: A4C_DiamondAgent
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - DiamondLinuxAgent_started
        DiamondLinuxAgent_started:
          node: A4C_DiamondAgent
          activity:
            set_state: started
        GraphiteBackend_install:
          node: GraphiteBackend
          activity:
            delegate: install
          on-success:
            - DiamondLinuxAgent_initial_1
            - DiamondLinuxAgent_initial
        Compute_install_1:
          node: CFY_Compute
          activity:
            delegate: install
          on-success:
            - DiamondLinuxAgent_initial_1
            - ByonLocationConfigurator_initial
            - OrchestratorConfigurator_configuring
            - DiamondLinuxAgent_configuring_1
            - AnsibleApache_initial
            - HostPoolService_configuring
            - HostPoolService_initial
            - CloudifyManager_initial
            - Ansible4CloudifyManager_initial
        DiamondLinuxAgent_initial_1:
          node: CFY_DiamondAgent
          activity:
            set_state: initial
          on-success:
            - DiamondLinuxAgent_creating_1
        DiamondLinuxAgent_creating_1:
          node: CFY_DiamondAgent
          activity:
            set_state: creating
          on-success:
            - create_DiamondLinuxAgent_1
        create_DiamondLinuxAgent_1:
          node: CFY_DiamondAgent
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - DiamondLinuxAgent_created_1
        DiamondLinuxAgent_created_1:
          node: CFY_DiamondAgent
          activity:
            set_state: created
          on-success:
            - ByonLocationConfigurator_initial
            - OrchestratorConfigurator_configuring
            - CloudifyManager_configuring
            - DiamondLinuxAgent_configuring_1
            - HostPoolService_configuring
            - HostPoolService_initial
            - CloudifyManager_initial
        DiamondLinuxAgent_configuring_1:
          node: CFY_DiamondAgent
          activity:
            set_state: configuring
          on-success:
            - configure_DiamondLinuxAgent_1
        configure_DiamondLinuxAgent_1:
          node: CFY_DiamondAgent
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - DiamondLinuxAgent_configured_1
        DiamondLinuxAgent_configured_1:
          node: CFY_DiamondAgent
          activity:
            set_state: configured
          on-success:
            - DiamondLinuxAgent_starting_1
        DiamondLinuxAgent_starting_1:
          node: CFY_DiamondAgent
          activity:
            set_state: starting
          on-success:
            - start_DiamondLinuxAgent_1
        start_DiamondLinuxAgent_1:
          node: CFY_DiamondAgent
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - DiamondLinuxAgent_started_1
        DiamondLinuxAgent_started_1:
          node: CFY_DiamondAgent
          activity:
            set_state: started
          on-success:
            - HostPoolService_initial
        AWSHostpoolFeeder_initial:
          node: AWSHostpoolFeeder
          activity:
            set_state: initial
          on-success:
            - AWSHostpoolFeeder_creating
        AWSHostpoolFeeder_creating:
          node: AWSHostpoolFeeder
          activity:
            set_state: creating
          on-success:
            - AWSHostpoolFeeder_created
        AWSHostpoolFeeder_created:
          node: AWSHostpoolFeeder
          activity:
            set_state: created
          on-success:
            - HostPoolService_configuring
            - AWSHostpoolFeeder_configuring
        AWSHostpoolFeeder_configuring:
          node: AWSHostpoolFeeder
          activity:
            set_state: configuring
          on-success:
            - configure_AWSHostpoolFeeder
        configure_AWSHostpoolFeeder:
          node: AWSHostpoolFeeder
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - AWSHostpoolFeeder_configured
        AWSHostpoolFeeder_configured:
          node: AWSHostpoolFeeder
          activity:
            set_state: configured
          on-success:
            - AWSHostpoolFeeder_starting
        AWSHostpoolFeeder_starting:
          node: AWSHostpoolFeeder
          activity:
            set_state: starting
          on-success:
            - start_AWSHostpoolFeeder
        start_AWSHostpoolFeeder:
          node: AWSHostpoolFeeder
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - AWSHostpoolFeeder_started
        AWSHostpoolFeeder_started:
          node: AWSHostpoolFeeder
          activity:
            set_state: started
        HostPoolService_initial:
          node: HostPoolService
          activity:
            set_state: initial
          on-success:
            - HostPoolService_creating
        HostPoolService_creating:
          node: HostPoolService
          activity:
            set_state: creating
          on-success:
            - create_HostPoolService
        create_HostPoolService:
          node: HostPoolService
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - HostPoolService_created
        HostPoolService_created:
          node: HostPoolService
          activity:
            set_state: created
          on-success:
            - AmqpClientPatch_initial
            - HostPoolService_configuring
        HostPoolService_configuring:
          node: HostPoolService
          activity:
            set_state: configuring
          on-success:
            - configure_HostPoolService
        configure_HostPoolService:
          node: HostPoolService
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - HostPoolService_configured
        HostPoolService_configured:
          node: HostPoolService
          activity:
            set_state: configured
          on-success:
            - HostPoolService_starting
        HostPoolService_starting:
          node: HostPoolService
          activity:
            set_state: starting
          on-success:
            - start_HostPoolService
        start_HostPoolService:
          node: HostPoolService
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - HostPoolService_started
        HostPoolService_started:
          node: HostPoolService
          activity:
            set_state: started
          on-success:
            - AWSHostpoolFeeder_configuring
            - Ansible4CloudifyManager_initial
            - ByonLocationConfigurator_configuring
        Ansible4CloudifyManager_initial:
          node: Ansible4CloudifyManager
          activity:
            set_state: initial
          on-success:
            - Ansible4CloudifyManager_creating
        Ansible4CloudifyManager_creating:
          node: Ansible4CloudifyManager
          activity:
            set_state: creating
          on-success:
            - create_Ansible4CloudifyManager
        create_Ansible4CloudifyManager:
          node: Ansible4CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - Ansible4CloudifyManager_created
        Ansible4CloudifyManager_created:
          node: Ansible4CloudifyManager
          activity:
            set_state: created
          on-success:
            - Ansible4CloudifyManager_configuring
        Ansible4CloudifyManager_configuring:
          node: Ansible4CloudifyManager
          activity:
            set_state: configuring
          on-success:
            - configure_Ansible4CloudifyManager
        configure_Ansible4CloudifyManager:
          node: Ansible4CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - Ansible4CloudifyManager_configured
        Ansible4CloudifyManager_configured:
          node: Ansible4CloudifyManager
          activity:
            set_state: configured
          on-success:
            - Ansible4CloudifyManager_starting
        Ansible4CloudifyManager_starting:
          node: Ansible4CloudifyManager
          activity:
            set_state: starting
          on-success:
            - start_Ansible4CloudifyManager
        start_Ansible4CloudifyManager:
          node: Ansible4CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - Ansible4CloudifyManager_started
        Ansible4CloudifyManager_started:
          node: Ansible4CloudifyManager
          activity:
            set_state: started
          on-success:
            - AnsibleApache_initial
        AnsibleApache_initial:
          node: OfflineApache
          activity:
            set_state: initial
          on-success:
            - AnsibleApache_creating
        AnsibleApache_creating:
          node: OfflineApache
          activity:
            set_state: creating
          on-success:
            - create_AnsibleApache
        create_AnsibleApache:
          node: OfflineApache
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - AnsibleApache_created
        AnsibleApache_created:
          node: OfflineApache
          activity:
            set_state: created
          on-success:
            - AnsibleApache_configuring
        AnsibleApache_configuring:
          node: OfflineApache
          activity:
            set_state: configuring
          on-success:
            - configure_AnsibleApache
        configure_AnsibleApache:
          node: OfflineApache
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - AnsibleApache_configured
        AnsibleApache_configured:
          node: OfflineApache
          activity:
            set_state: configured
          on-success:
            - AnsibleApache_starting
        AnsibleApache_starting:
          node: OfflineApache
          activity:
            set_state: starting
          on-success:
            - start_AnsibleApache
        start_AnsibleApache:
          node: OfflineApache
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - AnsibleApache_started
        AnsibleApache_started:
          node: OfflineApache
          activity:
            set_state: started
        AddCsarFromGit_initial:
          node: AddCsarExtended
          activity:
            set_state: initial
          on-success:
            - AddCsarFromGit_creating
        AddCsarFromGit_creating:
          node: AddCsarExtended
          activity:
            set_state: creating
          on-success:
            - AddCsarFromGit_created
        AddCsarFromGit_created:
          node: AddCsarExtended
          activity:
            set_state: created
          on-success:
            - AddCsarFromGit_configuring
            - Alien4Cloud_configuring
        AddCsarFromGit_configuring:
          node: AddCsarExtended
          activity:
            set_state: configuring
          on-success:
            - configure_AddCsarFromGit
        configure_AddCsarFromGit:
          node: AddCsarExtended
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - AddCsarFromGit_configured
        AddCsarFromGit_configured:
          node: AddCsarExtended
          activity:
            set_state: configured
          on-success:
            - AddCsarFromGit_starting
        AddCsarFromGit_starting:
          node: AddCsarExtended
          activity:
            set_state: starting
          on-success:
            - start_AddCsarFromGit
        start_AddCsarFromGit:
          node: AddCsarExtended
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - AddCsarFromGit_started
        AddCsarFromGit_started:
          node: AddCsarExtended
          activity:
            set_state: started
          on-success:
            - AddCsarFromGit_configuring_1
        AddCsarFromGit_initial_1:
          node: AddCsarMock
          activity:
            set_state: initial
          on-success:
            - AddCsarFromGit_creating_1
        AddCsarFromGit_creating_1:
          node: AddCsarMock
          activity:
            set_state: creating
          on-success:
            - create_AddCsarFromGit
        create_AddCsarFromGit:
          node: AddCsarMock
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - AddCsarFromGit_created_1
        AddCsarFromGit_created_1:
          node: AddCsarMock
          activity:
            set_state: created
          on-success:
            - AddCsarFromGit_configuring
            - AddCsarFromGit_configuring_1
            - Alien4Cloud_configuring
        AddCsarFromGit_configuring_1:
          node: AddCsarMock
          activity:
            set_state: configuring
          on-success:
            - configure_AddCsarFromGit_1
        configure_AddCsarFromGit_1:
          node: AddCsarMock
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - AddCsarFromGit_configured_1
        AddCsarFromGit_configured_1:
          node: AddCsarMock
          activity:
            set_state: configured
          on-success:
            - AddCsarFromGit_starting_1
        AddCsarFromGit_starting_1:
          node: AddCsarMock
          activity:
            set_state: starting
          on-success:
            - start_AddCsarFromGit_1
        start_AddCsarFromGit_1:
          node: AddCsarMock
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - AddCsarFromGit_started_1
        AddCsarFromGit_started_1:
          node: AddCsarMock
          activity:
            set_state: started
          on-success:
            - ByonLocationConfigurator_initial
            - OrchestratorConfigurator_configuring
            - HostPoolService_configuring
        ByonLocationConfigurator_initial:
          node: ByonLocationConfigurator
          activity:
            set_state: initial
          on-success:
            - ByonLocationConfigurator_creating
        ByonLocationConfigurator_creating:
          node: ByonLocationConfigurator
          activity:
            set_state: creating
          on-success:
            - create_ByonLocationConfigurator
        create_ByonLocationConfigurator:
          node: ByonLocationConfigurator
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - ByonLocationConfigurator_created
        ByonLocationConfigurator_created:
          node: ByonLocationConfigurator
          activity:
            set_state: created
          on-success:
            - HostPoolService_configuring
            - ByonLocationConfigurator_configuring
        ByonLocationConfigurator_configuring:
          node: ByonLocationConfigurator
          activity:
            set_state: configuring
          on-success:
            - configure_ByonLocationConfigurator
        configure_ByonLocationConfigurator:
          node: ByonLocationConfigurator
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - ByonLocationConfigurator_configured
        ByonLocationConfigurator_configured:
          node: ByonLocationConfigurator
          activity:
            set_state: configured
          on-success:
            - ByonLocationConfigurator_starting
        ByonLocationConfigurator_starting:
          node: ByonLocationConfigurator
          activity:
            set_state: starting
          on-success:
            - start_ByonLocationConfigurator
        start_ByonLocationConfigurator:
          node: ByonLocationConfigurator
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - ByonLocationConfigurator_started
        ByonLocationConfigurator_started:
          node: ByonLocationConfigurator
          activity:
            set_state: started
        OrchestratorConfigurator_initial:
          node: OrchestratorConfigurator
          activity:
            set_state: initial
          on-success:
            - OrchestratorConfigurator_creating
        OrchestratorConfigurator_creating:
          node: OrchestratorConfigurator
          activity:
            set_state: creating
          on-success:
            - OrchestratorConfigurator_created
        OrchestratorConfigurator_created:
          node: OrchestratorConfigurator
          activity:
            set_state: created
          on-success:
            - OrchestratorConfigurator_configuring
            - AddCsarFromGit_configuring_1
            - ByonLocationConfigurator_initial
            - CloudifyManager_configuring
            - DiamondLinuxAgent_configuring_1
            - Alien4Cloud_configuring
            - HostPoolService_configuring
            - HostPoolService_initial
        OrchestratorConfigurator_configuring:
          node: OrchestratorConfigurator
          activity:
            set_state: configuring
          on-success:
            - configure_OrchestratorConfigurator
        configure_OrchestratorConfigurator:
          node: OrchestratorConfigurator
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - OrchestratorConfigurator_configured
        OrchestratorConfigurator_configured:
          node: OrchestratorConfigurator
          activity:
            set_state: configured
          on-success:
            - OrchestratorConfigurator_starting
        OrchestratorConfigurator_starting:
          node: OrchestratorConfigurator
          activity:
            set_state: starting
          on-success:
            - start_OrchestratorConfigurator
        start_OrchestratorConfigurator:
          node: OrchestratorConfigurator
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - OrchestratorConfigurator_started
        OrchestratorConfigurator_started:
          node: OrchestratorConfigurator
          activity:
            set_state: started
          on-success:
            - ByonLocationConfigurator_initial
        CloudifyManager_initial:
          node: CloudifyManager
          activity:
            set_state: initial
          on-success:
            - CloudifyManager_creating
        CloudifyManager_creating:
          node: CloudifyManager
          activity:
            set_state: creating
          on-success:
            - create_CloudifyManager
        create_CloudifyManager:
          node: CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - CloudifyManager_created
        CloudifyManager_created:
          node: CloudifyManager
          activity:
            set_state: created
          on-success:
            - CloudifyManager_configuring
        CloudifyManager_configuring:
          node: CloudifyManager
          activity:
            set_state: configuring
          on-success:
            - configure_CloudifyManager
        configure_CloudifyManager:
          node: CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - CloudifyManager_configured
        CloudifyManager_configured:
          node: CloudifyManager
          activity:
            set_state: configured
          on-success:
            - CloudifyManager_starting
        CloudifyManager_starting:
          node: CloudifyManager
          activity:
            set_state: starting
          on-success:
            - start_CloudifyManager
        start_CloudifyManager:
          node: CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - CloudifyManager_started
        CloudifyManager_started:
          node: CloudifyManager
          activity:
            set_state: started
          on-success:
            - CloudifyAwsConfiguration_initial
            - OrchestratorConfigurator_configuring
            - AmqpClientPatch_initial
            - DiamondLinuxAgent_configuring_1
        CloudifyAwsConfiguration_initial:
          node: CloudifyAwsConfiguration
          activity:
            set_state: initial
          on-success:
            - CloudifyAwsConfiguration_creating
        CloudifyAwsConfiguration_creating:
          node: CloudifyAwsConfiguration
          activity:
            set_state: creating
          on-success:
            - create_CloudifyAwsConfiguration
        create_CloudifyAwsConfiguration:
          node: CloudifyAwsConfiguration
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - CloudifyAwsConfiguration_created
        CloudifyAwsConfiguration_created:
          node: CloudifyAwsConfiguration
          activity:
            set_state: created
          on-success:
            - CloudifyAwsConfiguration_configuring
        CloudifyAwsConfiguration_configuring:
          node: CloudifyAwsConfiguration
          activity:
            set_state: configuring
          on-success:
            - configure_CloudifyAwsConfiguration
        configure_CloudifyAwsConfiguration:
          node: CloudifyAwsConfiguration
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - CloudifyAwsConfiguration_configured
        CloudifyAwsConfiguration_configured:
          node: CloudifyAwsConfiguration
          activity:
            set_state: configured
          on-success:
            - CloudifyAwsConfiguration_starting
        CloudifyAwsConfiguration_starting:
          node: CloudifyAwsConfiguration
          activity:
            set_state: starting
          on-success:
            - start_CloudifyAwsConfiguration
        start_CloudifyAwsConfiguration:
          node: CloudifyAwsConfiguration
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - CloudifyAwsConfiguration_started
        CloudifyAwsConfiguration_started:
          node: CloudifyAwsConfiguration
          activity:
            set_state: started
          on-success:
            - DiamondLinuxAgent_configuring_1
        AmqpClientPatch_initial:
          node: AmqpClientPatch
          activity:
            set_state: initial
          on-success:
            - AmqpClientPatch_creating
        AmqpClientPatch_creating:
          node: AmqpClientPatch
          activity:
            set_state: creating
          on-success:
            - create_AmqpClientPatch
        create_AmqpClientPatch:
          node: AmqpClientPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - AmqpClientPatch_created
        AmqpClientPatch_created:
          node: AmqpClientPatch
          activity:
            set_state: created
          on-success:
            - AmqpClientPatch_configuring
        AmqpClientPatch_configuring:
          node: AmqpClientPatch
          activity:
            set_state: configuring
          on-success:
            - configure_AmqpClientPatch
        configure_AmqpClientPatch:
          node: AmqpClientPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - AmqpClientPatch_configured
        AmqpClientPatch_configured:
          node: AmqpClientPatch
          activity:
            set_state: configured
          on-success:
            - AmqpClientPatch_starting
        AmqpClientPatch_starting:
          node: AmqpClientPatch
          activity:
            set_state: starting
          on-success:
            - start_AmqpClientPatch
        start_AmqpClientPatch:
          node: AmqpClientPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - AmqpClientPatch_started
        AmqpClientPatch_started:
          node: AmqpClientPatch
          activity:
            set_state: started
          on-success:
            - HostPoolService_configuring
    uninstall:
      steps:
        Compute_uninstall:
          node: A4C_Compute
          activity:
            delegate: uninstall
        OracleJDK_stopping:
          node: A4C_JDK
          activity:
            set_state: stopping
          on-success:
            - stop_OracleJDK
        stop_OracleJDK:
          node: A4C_JDK
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - OracleJDK_stopped
        OracleJDK_stopped:
          node: A4C_JDK
          activity:
            set_state: stopped
          on-success:
            - OracleJDK_deleting
        OracleJDK_deleting:
          node: A4C_JDK
          activity:
            set_state: deleting
          on-success:
            - delete_OracleJDK
        delete_OracleJDK:
          node: A4C_JDK
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - OracleJDK_deleted
        OracleJDK_deleted:
          node: A4C_JDK
          activity:
            set_state: deleted
          on-success:
            - Compute_uninstall
        Alien4Cloud_stopping:
          node: A4C
          activity:
            set_state: stopping
          on-success:
            - stop_Alien4Cloud
        stop_Alien4Cloud:
          node: A4C
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - Alien4Cloud_stopped
        Alien4Cloud_stopped:
          node: A4C
          activity:
            set_state: stopped
          on-success:
            - ElasticSearch_stopping
            - Alien4Cloud_deleting
        Alien4Cloud_deleting:
          node: A4C
          activity:
            set_state: deleting
          on-success:
            - delete_Alien4Cloud
        delete_Alien4Cloud:
          node: A4C
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - Alien4Cloud_deleted
        Alien4Cloud_deleted:
          node: A4C
          activity:
            set_state: deleted
          on-success:
            - OracleJDK_stopping
            - ElasticSearch_stopping
        ElasticSearch_stopping:
          node: A4C_ElasticSearch
          activity:
            set_state: stopping
          on-success:
            - stop_ElasticSearch
        stop_ElasticSearch:
          node: A4C_ElasticSearch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - ElasticSearch_stopped
        ElasticSearch_stopped:
          node: A4C_ElasticSearch
          activity:
            set_state: stopped
          on-success:
            - ElasticSearch_deleting
        ElasticSearch_deleting:
          node: A4C_ElasticSearch
          activity:
            set_state: deleting
          on-success:
            - delete_ElasticSearch
        delete_ElasticSearch:
          node: A4C_ElasticSearch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - ElasticSearch_deleted
        ElasticSearch_deleted:
          node: A4C_ElasticSearch
          activity:
            set_state: deleted
          on-success:
            - OracleJDK_stopping
        DiamondLinuxAgent_stopping:
          node: A4C_DiamondAgent
          activity:
            set_state: stopping
          on-success:
            - stop_DiamondLinuxAgent
        stop_DiamondLinuxAgent:
          node: A4C_DiamondAgent
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - DiamondLinuxAgent_stopped
        DiamondLinuxAgent_stopped:
          node: A4C_DiamondAgent
          activity:
            set_state: stopped
          on-success:
            - DiamondLinuxAgent_deleting
            - Alien4Cloud_stopping
            - ElasticSearch_stopping
        DiamondLinuxAgent_deleting:
          node: A4C_DiamondAgent
          activity:
            set_state: deleting
          on-success:
            - delete_DiamondLinuxAgent
        delete_DiamondLinuxAgent:
          node: A4C_DiamondAgent
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - DiamondLinuxAgent_deleted
        DiamondLinuxAgent_deleted:
          node: A4C_DiamondAgent
          activity:
            set_state: deleted
          on-success:
            - Compute_uninstall
            - Alien4Cloud_stopping
            - GraphiteBackend_uninstall
        GraphiteBackend_uninstall:
          node: GraphiteBackend
          activity:
            delegate: uninstall
        Compute_uninstall_1:
          node: CFY_Compute
          activity:
            delegate: uninstall
        DiamondLinuxAgent_stopping_1:
          node: CFY_DiamondAgent
          activity:
            set_state: stopping
          on-success:
            - stop_DiamondLinuxAgent_1
        stop_DiamondLinuxAgent_1:
          node: CFY_DiamondAgent
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - DiamondLinuxAgent_stopped_1
        DiamondLinuxAgent_stopped_1:
          node: CFY_DiamondAgent
          activity:
            set_state: stopped
          on-success:
            - ByonLocationConfigurator_stopping
            - DiamondLinuxAgent_deleting_1
            - HostPoolService_stopping
            - Compute_uninstall_1
            - CloudifyManager_stopping
        DiamondLinuxAgent_deleting_1:
          node: CFY_DiamondAgent
          activity:
            set_state: deleting
          on-success:
            - delete_DiamondLinuxAgent_1
        delete_DiamondLinuxAgent_1:
          node: CFY_DiamondAgent
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - DiamondLinuxAgent_deleted_1
        DiamondLinuxAgent_deleted_1:
          node: CFY_DiamondAgent
          activity:
            set_state: deleted
          on-success:
            - GraphiteBackend_uninstall
            - HostPoolService_stopping
            - Compute_uninstall_1
        AWSHostpoolFeeder_stopping:
          node: AWSHostpoolFeeder
          activity:
            set_state: stopping
          on-success:
            - stop_AWSHostpoolFeeder
        stop_AWSHostpoolFeeder:
          node: AWSHostpoolFeeder
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - AWSHostpoolFeeder_stopped
        AWSHostpoolFeeder_stopped:
          node: AWSHostpoolFeeder
          activity:
            set_state: stopped
          on-success:
            - HostPoolService_stopping
            - AWSHostpoolFeeder_deleting
        AWSHostpoolFeeder_deleting:
          node: AWSHostpoolFeeder
          activity:
            set_state: deleting
          on-success:
            - delete_AWSHostpoolFeeder
        delete_AWSHostpoolFeeder:
          node: AWSHostpoolFeeder
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - AWSHostpoolFeeder_deleted
        AWSHostpoolFeeder_deleted:
          node: AWSHostpoolFeeder
          activity:
            set_state: deleted
        HostPoolService_stopping:
          node: HostPoolService
          activity:
            set_state: stopping
          on-success:
            - stop_HostPoolService
        stop_HostPoolService:
          node: HostPoolService
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - HostPoolService_stopped
        HostPoolService_stopped:
          node: HostPoolService
          activity:
            set_state: stopped
          on-success:
            - HostPoolService_deleting
        HostPoolService_deleting:
          node: HostPoolService
          activity:
            set_state: deleting
          on-success:
            - delete_HostPoolService
        delete_HostPoolService:
          node: HostPoolService
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - HostPoolService_deleted
        HostPoolService_deleted:
          node: HostPoolService
          activity:
            set_state: deleted
          on-success:
            - Ansible4CloudifyManager_stopping
            - Compute_uninstall_1
        Ansible4CloudifyManager_stopping:
          node: Ansible4CloudifyManager
          activity:
            set_state: stopping
          on-success:
            - stop_Ansible4CloudifyManager
        stop_Ansible4CloudifyManager:
          node: Ansible4CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - Ansible4CloudifyManager_stopped
        Ansible4CloudifyManager_stopped:
          node: Ansible4CloudifyManager
          activity:
            set_state: stopped
          on-success:
            - Ansible4CloudifyManager_deleting
        Ansible4CloudifyManager_deleting:
          node: Ansible4CloudifyManager
          activity:
            set_state: deleting
          on-success:
            - delete_Ansible4CloudifyManager
        delete_Ansible4CloudifyManager:
          node: Ansible4CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - Ansible4CloudifyManager_deleted
        Ansible4CloudifyManager_deleted:
          node: Ansible4CloudifyManager
          activity:
            set_state: deleted
          on-success:
            - Compute_uninstall_1
            - AnsibleApache_stopping
        AnsibleApache_stopping:
          node: OfflineApache
          activity:
            set_state: stopping
          on-success:
            - stop_AnsibleApache
        stop_AnsibleApache:
          node: OfflineApache
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - AnsibleApache_stopped
        AnsibleApache_stopped:
          node: OfflineApache
          activity:
            set_state: stopped
          on-success:
            - AnsibleApache_deleting
        AnsibleApache_deleting:
          node: OfflineApache
          activity:
            set_state: deleting
          on-success:
            - delete_AnsibleApache
        delete_AnsibleApache:
          node: OfflineApache
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - AnsibleApache_deleted
        AnsibleApache_deleted:
          node: OfflineApache
          activity:
            set_state: deleted
          on-success:
            - Compute_uninstall_1
        AddCsarFromGit_stopping:
          node: AddCsarExtended
          activity:
            set_state: stopping
          on-success:
            - stop_AddCsarFromGit
        stop_AddCsarFromGit:
          node: AddCsarExtended
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - AddCsarFromGit_stopped
        AddCsarFromGit_stopped:
          node: AddCsarExtended
          activity:
            set_state: stopped
          on-success:
            - Alien4Cloud_stopping
            - AddCsarFromGit_deleting
        AddCsarFromGit_deleting:
          node: AddCsarExtended
          activity:
            set_state: deleting
          on-success:
            - delete_AddCsarFromGit
        delete_AddCsarFromGit:
          node: AddCsarExtended
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - AddCsarFromGit_deleted
        AddCsarFromGit_deleted:
          node: AddCsarExtended
          activity:
            set_state: deleted
        AddCsarFromGit_stopping_1:
          node: AddCsarMock
          activity:
            set_state: stopping
          on-success:
            - stop_AddCsarFromGit_1
        stop_AddCsarFromGit_1:
          node: AddCsarMock
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - AddCsarFromGit_stopped_1
        AddCsarFromGit_stopped_1:
          node: AddCsarMock
          activity:
            set_state: stopped
          on-success:
            - Alien4Cloud_stopping
            - AddCsarFromGit_deleting_1
        AddCsarFromGit_deleting_1:
          node: AddCsarMock
          activity:
            set_state: deleting
          on-success:
            - delete_AddCsarFromGit_1
        delete_AddCsarFromGit_1:
          node: AddCsarMock
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - AddCsarFromGit_deleted_1
        AddCsarFromGit_deleted_1:
          node: AddCsarMock
          activity:
            set_state: deleted
        ByonLocationConfigurator_stopping:
          node: ByonLocationConfigurator
          activity:
            set_state: stopping
          on-success:
            - stop_ByonLocationConfigurator
        stop_ByonLocationConfigurator:
          node: ByonLocationConfigurator
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - ByonLocationConfigurator_stopped
        ByonLocationConfigurator_stopped:
          node: ByonLocationConfigurator
          activity:
            set_state: stopped
          on-success:
            - HostPoolService_stopping
            - ByonLocationConfigurator_deleting
        ByonLocationConfigurator_deleting:
          node: ByonLocationConfigurator
          activity:
            set_state: deleting
          on-success:
            - delete_ByonLocationConfigurator
        delete_ByonLocationConfigurator:
          node: ByonLocationConfigurator
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - ByonLocationConfigurator_deleted
        ByonLocationConfigurator_deleted:
          node: ByonLocationConfigurator
          activity:
            set_state: deleted
          on-success:
            - OrchestratorConfigurator_stopping
            - Alien4Cloud_stopping
            - DiamondLinuxAgent_deleting_1
            - HostPoolService_stopping
            - Compute_uninstall_1
        OrchestratorConfigurator_stopping:
          node: OrchestratorConfigurator
          activity:
            set_state: stopping
          on-success:
            - stop_OrchestratorConfigurator
        stop_OrchestratorConfigurator:
          node: OrchestratorConfigurator
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - OrchestratorConfigurator_stopped
        OrchestratorConfigurator_stopped:
          node: OrchestratorConfigurator
          activity:
            set_state: stopped
          on-success:
            - Alien4Cloud_stopping
            - OrchestratorConfigurator_deleting
            - DiamondLinuxAgent_deleting_1
            - HostPoolService_stopping
            - Compute_uninstall_1
            - CloudifyManager_stopping
        OrchestratorConfigurator_deleting:
          node: OrchestratorConfigurator
          activity:
            set_state: deleting
          on-success:
            - delete_OrchestratorConfigurator
        delete_OrchestratorConfigurator:
          node: OrchestratorConfigurator
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - OrchestratorConfigurator_deleted
        OrchestratorConfigurator_deleted:
          node: OrchestratorConfigurator
          activity:
            set_state: deleted
        CloudifyManager_stopping:
          node: CloudifyManager
          activity:
            set_state: stopping
          on-success:
            - stop_CloudifyManager
        stop_CloudifyManager:
          node: CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - CloudifyManager_stopped
        CloudifyManager_stopped:
          node: CloudifyManager
          activity:
            set_state: stopped
          on-success:
            - CloudifyManager_deleting
        CloudifyManager_deleting:
          node: CloudifyManager
          activity:
            set_state: deleting
          on-success:
            - delete_CloudifyManager
        delete_CloudifyManager:
          node: CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - CloudifyManager_deleted
        CloudifyManager_deleted:
          node: CloudifyManager
          activity:
            set_state: deleted
          on-success:
            - DiamondLinuxAgent_deleting_1
            - Compute_uninstall_1
        CloudifyAwsConfiguration_stopping:
          node: CloudifyAwsConfiguration
          activity:
            set_state: stopping
          on-success:
            - stop_CloudifyAwsConfiguration
        stop_CloudifyAwsConfiguration:
          node: CloudifyAwsConfiguration
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - CloudifyAwsConfiguration_stopped
        CloudifyAwsConfiguration_stopped:
          node: CloudifyAwsConfiguration
          activity:
            set_state: stopped
          on-success:
            - CloudifyAwsConfiguration_deleting
        CloudifyAwsConfiguration_deleting:
          node: CloudifyAwsConfiguration
          activity:
            set_state: deleting
          on-success:
            - delete_CloudifyAwsConfiguration
        delete_CloudifyAwsConfiguration:
          node: CloudifyAwsConfiguration
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - CloudifyAwsConfiguration_deleted
        CloudifyAwsConfiguration_deleted:
          node: CloudifyAwsConfiguration
          activity:
            set_state: deleted
          on-success:
            - CloudifyManager_stopping
        AmqpClientPatch_stopping:
          node: AmqpClientPatch
          activity:
            set_state: stopping
          on-success:
            - stop_AmqpClientPatch
        stop_AmqpClientPatch:
          node: AmqpClientPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - AmqpClientPatch_stopped
        AmqpClientPatch_stopped:
          node: AmqpClientPatch
          activity:
            set_state: stopped
          on-success:
            - AmqpClientPatch_deleting
        AmqpClientPatch_deleting:
          node: AmqpClientPatch
          activity:
            set_state: deleting
          on-success:
            - delete_AmqpClientPatch
        delete_AmqpClientPatch:
          node: AmqpClientPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - AmqpClientPatch_deleted
        AmqpClientPatch_deleted:
          node: AmqpClientPatch
          activity:
            set_state: deleted
          on-success:
            - CloudifyManager_stopping
