tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.automation.a4c.config.orch
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - alien-base-types:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.a4c.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.hostpool.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.manager.pub:1.4.0-SNAPSHOT
  - tosca-normative-types:1.0.0-ALIEN14

node_types:
  org.alien4cloud.automation.a4c.config.orch.nodes.OrchestratorConfigurator:
    description: |
      Configure an CFY orchestrator for A4C
    derived_from: tosca.nodes.Root
    properties:
      name:
        type: string
        required: true
        default: CFYOrchestrator
      pluginId:
        type: string
        required: true
        default: alien-cloudify-4-orchestrator-premium
      pluginBean:
        type: string
        required: true
        default: cloudify-orchestrator
    attributes:
      orchestratorId: { get_operation_output: [ SELF, Standard, start, orchestratorId ] }
      alien_url: { get_operation_output: [ SELF, Standard, start, alien_url ] }
      alien_user: { get_operation_output: [ SELF, Standard, start, alien_user ] }
      alien_password: { get_operation_output: [ SELF, Standard, start, alien_password ] }
    capabilities:
      location_config:
        type: org.alien4cloud.automation.a4c.config.orch.capabilities.OrchestratorConfigurator
        occurrences: [ 0, UNBOUNDED ]
    requirements:
      - alien:
          capability: org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi
          relationship: org.alien4cloud.automation.a4c.config.orch.relationships.ConnectsToA4C
          occurrences: [1, 1]
      - cfy:
          capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3
          relationship: org.alien4cloud.automation.a4c.config.orch.relationships.ConnectsToCfy
          occurrences: [1, 1]
    interfaces:
      Standard:
        start:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: start.yml
            name: { get_property: [SELF, name] }
            pluginId: { get_property: [SELF, pluginId] }
            pluginBean: { get_property: [SELF, pluginBean] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.automation.a4c.config.orch.nodes.LocationConfigurator:
    abstract: true
    description: |
      Configure an location for A4C
    derived_from: tosca.nodes.Root
    properties:
      name:
        type: string
        required: true
        default: MyLocation
      type:
        type: string
        required: true
        default: byon
        constraints:
          - valid_values: [ "amazon", "byon" ]
    attributes:
      locationId: { get_operation_output: [ SELF, Standard, start, locationId ] }
    requirements:
      - orchestrator:
          capability: org.alien4cloud.automation.a4c.config.orch.capabilities.OrchestratorConfigurator
          relationship: org.alien4cloud.automation.a4c.config.orch.relationships.LocationHostedOnOrchestrator
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          # create the location
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: create_location.yml
            name: { get_property: [SELF, name] }
            type: { get_property: [SELF, type] }
            orchestratorId: { get_attribute: [HOST, orchestratorId] }
            alien_url: { get_attribute: [HOST, alien_url] }
            alien_user: { get_attribute: [HOST, alien_user] }
            alien_password: { get_attribute: [HOST, alien_password] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.automation.a4c.config.orch.nodes.ByonLocationConfigurator:
    description: |
      Configure a BYON location for A4C
    derived_from: org.alien4cloud.automation.a4c.config.orch.nodes.LocationConfigurator
    properties:
      type:
        type: string
        required: true
        default: byon
        constraints:
          - valid_values: [ "byon" ]
      resourceType:
        type: string
        required: true
        default: byon
      resourceName:
        type: string
        required: true
        default: byon
      resourceArchiveName:
        type: string
        required: true
        default: byon
      resourceArchiveVersion:
        type: string
        required: true
        default: byon
      resourceId:
        type: string
        required: true
        default: byon
    attributes:
      locationId: { get_operation_output: [ SELF, Standard, start, locationId ] }
    requirements:
      - hostpool:
          capability: org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi
          relationship: org.alien4cloud.automation.a4c.config.orch.relationships.LocationConnectsToHostpool
          occurrences: [1, 1]
    interfaces:
      Standard:
        start:
          # create the location on demand resources
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: create_location_resource.yml
            orchestratorId: { get_attribute: [HOST, orchestratorId] }
            locationId: { get_attribute: [SELF, locationId] }
            alien_url: { get_attribute: [HOST, alien_url] }
            alien_user: { get_attribute: [HOST, alien_user] }
            alien_password: { get_attribute: [HOST, alien_password] }
            resourceType: { get_property: [SELF, resourceType] }
            resourceName: { get_property: [SELF, resourceName] }
            resourceArchiveName: { get_property: [SELF, resourceArchiveName] }
            resourceId: { get_property: [SELF, resourceId] }
          implementation: playbook/playbook.ansible

capability_types:
  org.alien4cloud.automation.a4c.config.orch.capabilities.OrchestratorConfigurator:
    derived_from: tosca.capabilities.Container

relationship_types:
  org.alien4cloud.automation.a4c.config.orch.relationships.ConnectsToA4C:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: connect_a4c.yml
            alien_user: { get_property: [TARGET, rest, user] }
            alien_password: { get_property: [TARGET, rest, password] }
            alien_url: { concat: [get_property: [TARGET, rest, protocol], "://", get_attribute: [TARGET, public_ip_address], ":", get_property: [TARGET, rest, port]] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.automation.a4c.config.orch.relationships.ConnectsToCfy:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3 ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: connect_cfy.yml
            cfy_user: { get_property: [TARGET, admin_username] }
            cfy_password: { get_property: [TARGET, admin_password] }
            cfy_url: { concat: [get_property: [TARGET, cloudify_api_v3, protocol], "://", get_attribute: [TARGET, public_ip_address], ":", get_property: [TARGET, cloudify_api_v3, port]] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.automation.a4c.config.orch.relationships.LocationHostedOnOrchestrator:
    derived_from: tosca.relationships.HostedOn
  org.alien4cloud.automation.a4c.config.orch.relationships.LocationConnectsToHostpool:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: connect_hostpool.yml
            hostpool_url: { concat: [get_property: [TARGET, cloudify_hostpool, protocol], "://", get_attribute: [TARGET, public_ip_address], ":", get_property: [TARGET, cloudify_hostpool, port]] }
          implementation: playbook/playbook.ansible
