---

#- name: Add repository
#  yum:
#    name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
#    state: present

#- name: Install pip
#  yum: pkg=python-pip state=present

- name: Install system dependencies (Ubuntu)
  apt: name={{item}} state=installed
  with_items:
    - python-pip
    - python-dev
    - build-essential
  when: ansible_distribution == 'Ubuntu'

- name: pip httplib2
  pip: name=httplib2

# read alien_url from a4c connection
- name: Check relationship inputs exists
  stat: path="/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_a4c/inputs/alien_url"
  register: alien_url_file
- name: read relationship inputs
  command: /bin/cat "/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_a4c/inputs/alien_url"
  register: alien_url_content
  when: alien_url_file.stat.exists
- set_fact:
    alien_url: "{{ alien_url_content.stdout_lines[0] }}"
  when: alien_url_file.stat.exists and alien_url_content.stdout_lines|length > 0

# read alien_user from a4c connection
- name: Check relationship inputs exists
  stat: path="/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_a4c/inputs/alien_user"
  register: alien_user_file
- name: read relationship inputs
  command: /bin/cat "/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_a4c/inputs/alien_user"
  register: alien_user_content
  when: alien_user_file.stat.exists
- set_fact:
    alien_user: "{{ alien_user_content.stdout_lines[0] }}"
  when: alien_user_file.stat.exists and alien_user_content.stdout_lines|length > 0

# read alien_password from a4c connection
- name: Check relationship inputs exists
  stat: path="/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_a4c/inputs/alien_password"
  register: alien_password_file
- name: read relationship inputs
  command: /bin/cat "/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_a4c/inputs/alien_password"
  register: alien_password_content
  when: alien_password_file.stat.exists
- set_fact:
    alien_password: "{{ alien_password_content.stdout_lines[0] }}"
  when: alien_password_file.stat.exists and alien_password_content.stdout_lines|length > 0

# read cfy_url from cfy connection
- name: Check relationship inputs exists
  stat: path="/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_url"
  register: cfy_url_file
- name: read relationship inputs
  command: /bin/cat "/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_url"
  register: cfy_url_content
  when: cfy_url_file.stat.exists
- set_fact:
    cfy_url: "{{ cfy_url_content.stdout_lines[0] }}"
  when: cfy_url_file.stat.exists and cfy_url_content.stdout_lines|length > 0

# read cfy_user from cfy connection
- name: Check relationship inputs exists
  stat: path="/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_user"
  register: cfy_user_file
- name: read relationship inputs
  command: /bin/cat "/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_user"
  register: cfy_user_content
  when: cfy_user_file.stat.exists
- set_fact:
    cfy_user: "{{ cfy_user_content.stdout_lines[0] }}"
  when: cfy_user_file.stat.exists and cfy_user_content.stdout_lines|length > 0

# read cfy_password from cfy connection
- name: Check relationship inputs exists
  stat: path="/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_password"
  register: cfy_password_file
- name: read relationship inputs
  command: /bin/cat "/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_password"
  register: cfy_password_content
  when: cfy_password_file.stat.exists
- set_fact:
    cfy_password: "{{ cfy_password_content.stdout_lines[0] }}"
  when: cfy_password_file.stat.exists and cfy_password_content.stdout_lines|length > 0

- name: login
  uri:
    url: "{{ alien_url }}/login?username={{ alien_user }}&password={{ alien_password }}&submit=Login"
    method: POST
    return_content: yes
    status_code: 302
    headers:
      Content-Type: "application/x-www-form-urlencoded"
  register: login

- set_fact:
    session_id: "{{ login.set_cookie.split(';')[0] }}"

# if a file is given as an artifact, upload it as a plugin for alien
- name: Check for orchestrator_plugin file
  local_action: "stat path={{ orchestrator_plugin }}"
  register: stat_orchestrator_plugin
- copy:
    src: "{{ orchestrator_plugin }}"
    dest: "/tmp/orchestrator_plugin_{{ INSTANCE }}.zip"
  when: stat_orchestrator_plugin.stat.exists
- name: upload plugin archive to A4C
  shell: "curl -k -X POST -H 'cookie: {{ session_id }}' -F file=@/tmp/orchestrator_plugin_{{ INSTANCE }}.zip '{{ alien_url }}/rest/latest/plugins'"
  when: stat_orchestrator_plugin.stat.exists

- name: Create Orchestrator
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators"
    method: POST
    return_content: yes
    HEADER_cookie: "{{ session_id }}"
    body:
      name: "{{ name }}"
      pluginId: "{{ pluginId }}"
      pluginBean: "{{ pluginBean }}"
    body_format: json
    status_code: 201
  register: result

- set_fact:
    content: "{{ result.content }}"

- set_fact:
    orchestratorId: "{{ content.data }}"

- name: Add orchestrator configuration
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/configuration"
    method: PUT
    return_content: yes
    HEADER_cookie: "{{ session_id }}"
    HEADER_Content-Type: "application/json"
    body:
      url: "{{ cfy_url }}"
      locations:
        openstack:
          dsl: cloudify_dsl_1_3
          imports:
          - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
          - http://www.getcloudify.org/spec/openstack-plugin/1.3.1/plugin.yaml
          - http://www.getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml
        amazon:
          dsl: cloudify_dsl_1_3
          imports:
          - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
          - http://www.getcloudify.org/spec/aws-plugin/1.3.1/plugin.yaml
          - http://www.getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml
        byon:
          dsl: cloudify_dsl_1_3
          imports:
          - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
          - http://www.getcloudify.org/spec/host-pool-plugin/1.4/plugin.yaml
          - http://www.getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml
        vsphere:
          dsl: cloudify_dsl_1_3
          imports:
          - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
          - http://getcloudify.org.s3.amazonaws.com/spec/vsphere-plugin/2.0/plugin.yaml
          - http://www.getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml
        azure:
          dsl: cloudify_dsl_1_3
          imports:
          - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
          - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-azure-plugin/1.4.1/plugin.yaml
          - http://www.getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml
          location: westeurope
          resourceGroup: ''
          virtualNetwork: ''
          subnet: ''
      userName: "{{ cfy_user }}"
      password: "{{ cfy_password }}"
      disableSSLVerification: true
      delayBetweenDeploymentStatusPolling: 30
      delayBetweenLogPolling: 5
      delayBetweenInProgressDeploymentStatusPolling: 5
      disableDiamondMonitorAgent: true
      postDeploymentRestURL:
      caCertificate:
      clientKey:
      clientCertificate:
      artifactConfigurations:
        ansibleConfiguration:
          defaultTimeout: 600
          defaultVerbose: false
      kubernetes:
        imports:
        - http://www.getcloudify.org/spec/fabric-plugin/1.4.1/plugin.yaml
        - plugins/cloudify-kubernetes-plugin/plugin-remote.yaml
        kubernetesUrl:
    body_format: json
    status_code: 200
  register: result

- name: Add orchestrator configuration
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/instance"
    method: POST
    HEADER_cookie: "{{ session_id }}"
    HEADER_Content-Type: "application/json"
