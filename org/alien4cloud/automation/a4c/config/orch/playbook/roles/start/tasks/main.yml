---

#- name: Add repository
#  yum:
#    name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
#    state: present

#- name: Install pip
#  yum: pkg=python-pip state=present

- name: Install system dependencies (Ubuntu)
  apt: name={{item}} state=installed
  with_items:
    - python-pip
    - python-dev
    - build-essential
  when: ansible_distribution == 'Ubuntu'

- name: pip httplib2
  pip: name=httplib2

# read cfy_url from cfy connection
- name: Check relationship inputs exists
  stat: path="/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_url"
  register: cfy_url_file
- name: read relationship inputs
  command: /bin/cat "/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_url"
  register: cfy_url_content
  when: cfy_url_file.stat.exists
- set_fact:
    cfy_url: "{{ cfy_url_content.stdout_lines[0] }}"
  when: cfy_url_file.stat.exists and cfy_url_content.stdout_lines|length > 0

# read cfy_user from cfy connection
- name: Check relationship inputs exists
  stat: path="/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_user"
  register: cfy_user_file
- name: read relationship inputs
  command: /bin/cat "/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_user"
  register: cfy_user_content
  when: cfy_user_file.stat.exists
- set_fact:
    cfy_user: "{{ cfy_user_content.stdout_lines[0] }}"
  when: cfy_user_file.stat.exists and cfy_user_content.stdout_lines|length > 0

# read cfy_password from cfy connection
- name: Check relationship inputs exists
  stat: path="/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_password"
  register: cfy_password_file
- name: read relationship inputs
  command: /bin/cat "/tmp/a4cPlaybookRegistry/{{ NODE }}/{{ INSTANCE }}/connect_cfy/inputs/cfy_password"
  register: cfy_password_content
  when: cfy_password_file.stat.exists
- set_fact:
    cfy_password: "{{ cfy_password_content.stdout_lines[0] }}"
  when: cfy_password_file.stat.exists and cfy_password_content.stdout_lines|length > 0

- name: login
  uri:
    url: "{{ alien_url }}/login?username={{ alien_user }}&password={{ alien_password }}&submit=Login"
    method: POST
    return_content: yes
    status_code: 302
    headers:
      Content-Type: "application/x-www-form-urlencoded"
  register: login

- set_fact:
    session_id: "{{ login.set_cookie.split(';')[0] }}"

- name: Create Orchestrator
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators"
    method: POST
    return_content: yes
    HEADER_cookie: "{{ session_id }}"
    body:
      name: "{{ name }}"
      pluginId: "{{ pluginId }}"
      pluginBean: "{{ pluginBean }}"
    body_format: json
  register: result

- set_fact:
    content: "{{ result.content }}"

- set_fact:
    orchestratorId: "{{ content.data }}"

- name: Add orchestrator configuration
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/configuration"
    method: POST
    return_content: yes
    HEADER_cookie: "{{ session_id }}"
    HEADER_Content-Type: "application/json"
    body: "{{ lookup('templates','orchestratorConfiguration.json') | to_json }}"
  register: result
