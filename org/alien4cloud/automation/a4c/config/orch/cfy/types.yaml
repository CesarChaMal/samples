tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.automation.a4c.config.orch.cfy
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - alien-base-types:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.a4c.config.orch.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.hostpool.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.manager.pub:1.4.0-SNAPSHOT
  - tosca-normative-types:1.0.0-ALIEN14

node_types:

  org.alien4cloud.automation.a4c.config.orch.cfy.nodes.OrchestratorConfigurator:
    description: |
      Configure a CFY orchestrator for A4C
    derived_from: org.alien4cloud.automation.a4c.config.orch.pub.nodes.OrchestratorConfigurator
    properties:
      name:
        type: string
        required: true
        default: CFYOrchestrator
      pluginId:
        type: string
        required: true
        default: alien-cloudify-4-orchestrator-premium
      pluginBean:
        type: string
        required: true
        default: cloudify-orchestrator
    requirements:
      - cfy:
          capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3
          relationship: org.alien4cloud.automation.a4c.config.orch.cfy.relationships.ConnectsToCfy
          occurrences: [1, 1]
    interfaces:
      Standard:
        start:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: create_orchestrator.yml
            name: { get_property: [SELF, name] }
            pluginId: { get_property: [SELF, pluginId] }
            pluginBean: { get_property: [SELF, pluginBean] }
          implementation: playbook/playbook.ansible

  org.alien4cloud.automation.a4c.config.orch.cfy.nodes.OrchestratorPluginConfigurator:
    description: |
      Upload CFY orchestrator plugin and configure a CFY orchestrator for A4C
    derived_from: org.alien4cloud.automation.a4c.config.orch.cfy.nodes.OrchestratorConfigurator
    interfaces:
      Standard:
        configure:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: upload_orchestrator_plugin.yml
          implementation: playbook/playbook.ansible
    artifacts:
      - orchestrator_plugin:
          type: tosca.artifacts.File

  org.alien4cloud.automation.a4c.config.orch.cfy.nodes.ByonLocationConfigurator:
    description: |
      Configure a BYON location for A4C
    derived_from: org.alien4cloud.automation.a4c.config.orch.pub.nodes.LocationConfigurator
    properties:
      type:
        type: string
        required: true
        default: byon
        constraints:
          - valid_values: [ "byon" ]
      resourceType:
        type: string
        required: true
        default: alien.cloudify.byon.nodes.LinuxCompute
      resourceName:
        type: string
        required: true
        default: MyResource
      resourceArchiveName:
        type: string
        required: true
        default: cloudify-byon-types
      resourceArchiveVersion:
        type: string
        required: true
        default: 1.4.0
      resourceAgentInstallMethod:
        type: string
        required: true
        default: none
    requirements:
      - hostpool:
          capability: org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi
          relationship: org.alien4cloud.automation.a4c.config.orch.cfy.relationships.LocationConnectsToHostpool
          occurrences: [1, 1]
    interfaces:
      Standard:
        start:
          # create the location on demand resources
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: create_byon_location_resource.yml
            orchestratorId: { get_attribute: [HOST, orchestratorId] }
            locationId: { get_attribute: [SELF, locationId] }
            alien_url: { get_attribute: [HOST, alien_url] }
            alien_user: { get_attribute: [HOST, alien_user] }
            alien_password: { get_attribute: [HOST, alien_password] }
            resourceType: { get_property: [SELF, resourceType] }
            resourceName: { get_property: [SELF, resourceName] }
            resourceArchiveName: { get_property: [SELF, resourceArchiveName] }
            resourceAgentInstallMethod: { get_property: [SELF, resourceAgentInstallMethod] }
          implementation: playbook/playbook.ansible

relationship_types:

  org.alien4cloud.automation.a4c.config.orch.cfy.relationships.ConnectsToCfy:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3 ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: connect_cfy.yml
            cfy_user: { get_property: [TARGET, admin_username] }
            cfy_password: { get_property: [TARGET, admin_password] }
            cfy_url: { concat: [get_property: [TARGET, cloudify_api_v3, protocol], "://", get_attribute: [TARGET, public_ip_address], ":", get_property: [TARGET, cloudify_api_v3, port]] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.automation.a4c.config.orch.cfy.relationships.LocationConnectsToHostpool:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: connect_hostpool.yml
            hostpool_url: { concat: [get_property: [TARGET, cloudify_hostpool, protocol], "://", get_attribute: [TARGET, public_ip_address], ":", get_property: [TARGET, cloudify_hostpool, port]] }
          implementation: playbook/playbook.ansible
