tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.automation.cloudify.topologies.cfy4_hp_aws
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

description: >
  A Cloudify 4 manager configured for AWS (with Ansible) and a Hostpool.
  Also embed a HostpoolFeeder that can instanciate EC2 instances and feed the hostpool.
  The workflow has been changed to ensure the hostpool is installed at the end of the deploy (to avoid issue with cfy bootstrap that needs port 8080).
  Instances are shutdown at uninstall workflow (but you can also use custom command to operate).
  Has been tested on a Centos ami-4c4b003b (m4.large).


imports:
  - org.alien4cloud.automation.cloudify.hostpool.service:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.hostpool.awsfeeder:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.manager.v4:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.manager.pub:1.4.0-SNAPSHOT
  - tosca-normative-types:1.0.0-ALIEN14
  - org.alien4cloud.automation.cloudify.patches.amqp_client:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.patches.change_max_mgmtworker:1.4.0-SNAPSHOT
  - alien-base-types:1.4.0-SNAPSHOT
  - org.alien4cloud.storage.elasticsearch.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.ansible:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.hostpool.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.db.postgresql.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.messaging.rabbitmq.pub:1.4.0-SNAPSHOT

topology_template:
  
  description: >
    A Cloudify 4 manager configured for AWS (with Ansible) and a Hostpool.
    Also embed a HostpoolFeeder that can instanciate EC2 instances and feed the hostpool.
    The workflow has been changed to ensure the hostpool is installed at the end of the deploy (to avoid issue with cfy bootstrap that needs port 8080).
    Instances are shutdown at uninstall workflow (but you can also use custom command to operate).
    Has been tested on a Centos ami-4c4b003b (m4.large).

  inputs:
    aws_region:
      type: string
      required: true
      default: "eu-west-1"
      description: "The aws region to use to start aws instances."
    aws_access_key:
      type: string
      required: true
      description: "The aws access key of the account to use to start aws instances."
    aws_secret_key:
      type: string
      required: true
      description: "The aws secret key of the account to use to start aws instances."
    aws_keypair_name:
      type: string
      required: false
      description: "Optional name of the key as known by the iaas (in case of iaas key)."
    aws_key_name:
      type: string
      required: true
      description: "The AWS key name"
    aws_key_content:
      type: string
      required: true
      description: "The AWS key"
    aws_instance_groups:
      type: string
      required: true
      description: "Security groups the instances will be associated with"
    host_per_instance:
      type: integer
      required: true
      default: 1
      description: "Number of host to declare in hostpool per EC2 instance"
    instance_count:
      type: integer
      required: true
      default: 1
      description: "Number of instances to start"
    instance_name:
      type: string
      required: true
      default: HostpoolInstance
      description: "The AWS instance name"
  input_artifacts:
    key_file:
        type: tosca.artifacts.File
  substitution_mappings:
    node_type: org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyManagerService
    capabilities:
      cloudify_api_v3: [ CloudifyManager, cloudify_api_v3 ]
  node_templates:
    CloudifyManager:
      type: org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyManager
      properties:
        ssh_user: "ec2-user"
        ssh_key_filename: "aws-key.pem"
        keypair_name: { get_input: aws_keypair_name }
        agents_user: ubuntu
        component_version: "4.0.1-ga"
      requirements:
        - host:
            node: CFY_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      capabilities:
        rabbitmq_management:
          properties:
            user: cloudify
            password: c10udify
            protocol: http
            port: 15672
            secure: false
            network_name: PRIVATE
            initiator: source
        postgresql:
          properties:
            user: cloudify
            password: cloudify
            protocol: tcp
            port: 5432
            secure: false
            network_name: PRIVATE
            initiator: source
        cloudify_api_v3:
          properties:
            admin_username: admin
            admin_password: admin
            protocol: https
            port: 443
            secure: false
            network_name: PRIVATE
            initiator: source
      artifacts:
        key_file:
          file: { get_input_artifact: key_file }
          type: tosca.artifacts.File
    ChangeMaxMgmtWorkerPatch:
      type: org.alien4cloud.automation.cloudify.patches.change_max_mgmtworker.nodes.ChangeMaxMgmtWorkerPatch
      properties:
        mgmt_worker_count: 100
      requirements:
        - cfy_manager:
            node: CloudifyManager
            capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer
            relationship: tosca.relationships.HostedOn
    AmqpClientPatch:
      type: org.alien4cloud.automation.cloudify.patches.amqp_client.nodes.AmqpClientPatch
      requirements:
        - cfy_manager:
            node: CloudifyManager
            capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer
            relationship: tosca.relationships.HostedOn
    CloudifyAwsConfiguration:
      type: org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyAwsConfiguration
      properties:
        aws_access_key: { get_input: aws_access_key }
        aws_secret_key: { get_input: aws_secret_key }
        aws_region: { get_input: aws_region }
        agent_security_groups: "sg-fa45db9e"
      requirements:
        - cfy_manager:
            node: CloudifyManager
            capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer
            relationship: tosca.relationships.HostedOn
    Ansible4CloudifyManager:
      type: org.alien4cloud.automation.cloudify.ansible.nodes.Ansible4CloudifyManager
      properties:
        component_version: "2.0.1.0"
      requirements:
        - host:
            node: CFY_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    CFY_Compute:
      type: tosca.nodes.Compute
      capabilities:
        host:
          properties:
            num_cpus: 4
            mem_size: "4 GIB"
        os:
          properties:
            architecture: "x86_64"
            type: linux
            distribution: centos
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    HostPool:
      type: org.alien4cloud.automation.cloudify.hostpool.service.nodes.HostPool
      requirements:
        - host:
            node: CFY_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      capabilities:
        cloudify_hostpool:
          properties:
            protocol: http
            port: 8080
            secure: false
            network_name: PRIVATE
            initiator: source
    AWSHostpoolFeeder:
      type: org.alien4cloud.automation.cloudify.hostpool.awsfeeder.nodes.AWSHostpoolFeeder
      properties:
        aws_access_key: { get_input: aws_access_key }
        aws_secret_key: { get_input: aws_secret_key }
        key_name: { get_input: aws_key_name }
        key_content: { get_input: aws_key_content }
        region: { get_input: aws_region }
        instance_groups: { get_input: aws_instance_groups }
        instance_username: ubuntu
        instance_type: "t2.nano"
        instance_image: "ami-47a23a30"
        instance_count: { get_input: instance_count }
        host_per_instance: { get_input: host_per_instance }
        instance_name: { get_input: instance_name }
        instance_os: linux
      requirements:
        - hostpool:
            node: HostPool
            capability: org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi
            relationship: org.alien4cloud.automation.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool
        - host:
            node: CFY_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
  outputs:
    CloudifyManager_manager_url:
      value: { get_attribute: [ CloudifyManager, manager_url ] }
    HostPool_hostpool_url:
      value: { get_attribute: [ HostPool, hostpool_url ] }
    HostPool_hostpool_url_hosts:
      value: { get_attribute: [ HostPool, hostpool_url_hosts ] }
  workflows:
    install:
      steps:
        Compute_install:
          node: CFY_Compute
          activity:
            delegate: install
          on-success:
            - CloudifyAwsConfiguration_initial
            - CloudifyManager_configuring
            - HostPool_initial
            - AWSHostpoolFeeder_initial
            - CloudifyManager_initial
            - Ansible4CloudifyManager_initial
        CloudifyManager_initial:
          node: CloudifyManager
          activity:
            set_state: initial
          on-success:
            - CloudifyManager_creating
        CloudifyManager_creating:
          node: CloudifyManager
          activity:
            set_state: creating
          on-success:
            - create_CloudifyManager
        create_CloudifyManager:
          node: CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - CloudifyManager_created
        CloudifyManager_created:
          node: CloudifyManager
          activity:
            set_state: created
          on-success:
            - CloudifyManager_configuring
        CloudifyManager_configuring:
          node: CloudifyManager
          activity:
            set_state: configuring
          on-success:
            - configure_CloudifyManager
        configure_CloudifyManager:
          node: CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - CloudifyManager_configured
        CloudifyManager_configured:
          node: CloudifyManager
          activity:
            set_state: configured
          on-success:
            - CloudifyManager_starting
        CloudifyManager_starting:
          node: CloudifyManager
          activity:
            set_state: starting
          on-success:
            - start_CloudifyManager
        start_CloudifyManager:
          node: CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - CloudifyManager_started
        CloudifyManager_started:
          node: CloudifyManager
          activity:
            set_state: started
          on-success:
            - CloudifyAwsConfiguration_initial
            - AmqpClientPatch_initial
            - ChangeMaxMgmtWorkerPatch_initial
            - Ansible4CloudifyManager_initial
        CloudifyAwsConfiguration_initial:
          node: CloudifyAwsConfiguration
          activity:
            set_state: initial
          on-success:
            - CloudifyAwsConfiguration_creating
        CloudifyAwsConfiguration_creating:
          node: CloudifyAwsConfiguration
          activity:
            set_state: creating
          on-success:
            - create_CloudifyAwsConfiguration
        create_CloudifyAwsConfiguration:
          node: CloudifyAwsConfiguration
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - CloudifyAwsConfiguration_created
        CloudifyAwsConfiguration_created:
          node: CloudifyAwsConfiguration
          activity:
            set_state: created
          on-success:
            - CloudifyAwsConfiguration_configuring
        CloudifyAwsConfiguration_configuring:
          node: CloudifyAwsConfiguration
          activity:
            set_state: configuring
          on-success:
            - configure_CloudifyAwsConfiguration
        configure_CloudifyAwsConfiguration:
          node: CloudifyAwsConfiguration
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - CloudifyAwsConfiguration_configured
        CloudifyAwsConfiguration_configured:
          node: CloudifyAwsConfiguration
          activity:
            set_state: configured
          on-success:
            - CloudifyAwsConfiguration_starting
        CloudifyAwsConfiguration_starting:
          node: CloudifyAwsConfiguration
          activity:
            set_state: starting
          on-success:
            - start_CloudifyAwsConfiguration
        start_CloudifyAwsConfiguration:
          node: CloudifyAwsConfiguration
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - CloudifyAwsConfiguration_started
        CloudifyAwsConfiguration_started:
          node: CloudifyAwsConfiguration
          activity:
            set_state: started
          on-success:
            - ChangeMaxMgmtWorkerPatch_initial
        AmqpClientPatch_initial:
          node: AmqpClientPatch
          activity:
            set_state: initial
          on-success:
            - AmqpClientPatch_creating
        AmqpClientPatch_creating:
          node: AmqpClientPatch
          activity:
            set_state: creating
          on-success:
            - create_AmqpClientPatch
        create_AmqpClientPatch:
          node: AmqpClientPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - AmqpClientPatch_created
        AmqpClientPatch_created:
          node: AmqpClientPatch
          activity:
            set_state: created
          on-success:
            - AmqpClientPatch_configuring
        AmqpClientPatch_configuring:
          node: AmqpClientPatch
          activity:
            set_state: configuring
          on-success:
            - configure_AmqpClientPatch
        configure_AmqpClientPatch:
          node: AmqpClientPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - AmqpClientPatch_configured
        AmqpClientPatch_configured:
          node: AmqpClientPatch
          activity:
            set_state: configured
          on-success:
            - AmqpClientPatch_starting
        AmqpClientPatch_starting:
          node: AmqpClientPatch
          activity:
            set_state: starting
          on-success:
            - start_AmqpClientPatch
        start_AmqpClientPatch:
          node: AmqpClientPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - AmqpClientPatch_started
        AmqpClientPatch_started:
          node: AmqpClientPatch
          activity:
            set_state: started
          on-success:
            - HostPool_initial
        ChangeMaxMgmtWorkerPatch_initial:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: initial
          on-success:
            - ChangeMaxMgmtWorkerPatch_creating
        ChangeMaxMgmtWorkerPatch_creating:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: creating
          on-success:
            - create_ChangeMaxMgmtWorkerPatch
        create_ChangeMaxMgmtWorkerPatch:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - ChangeMaxMgmtWorkerPatch_created
        ChangeMaxMgmtWorkerPatch_created:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: created
          on-success:
            - ChangeMaxMgmtWorkerPatch_configuring
        ChangeMaxMgmtWorkerPatch_configuring:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: configuring
          on-success:
            - configure_ChangeMaxMgmtWorkerPatch
        configure_ChangeMaxMgmtWorkerPatch:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - ChangeMaxMgmtWorkerPatch_configured
        ChangeMaxMgmtWorkerPatch_configured:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: configured
          on-success:
            - ChangeMaxMgmtWorkerPatch_starting
        ChangeMaxMgmtWorkerPatch_starting:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: starting
          on-success:
            - start_ChangeMaxMgmtWorkerPatch
        start_ChangeMaxMgmtWorkerPatch:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - ChangeMaxMgmtWorkerPatch_started
        ChangeMaxMgmtWorkerPatch_started:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: started
          on-success:
            - AmqpClientPatch_initial
        Ansible4CloudifyManager_initial:
          node: Ansible4CloudifyManager
          activity:
            set_state: initial
          on-success:
            - Ansible4CloudifyManager_creating
        Ansible4CloudifyManager_creating:
          node: Ansible4CloudifyManager
          activity:
            set_state: creating
          on-success:
            - create_Ansible4CloudifyManager
        create_Ansible4CloudifyManager:
          node: Ansible4CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - Ansible4CloudifyManager_created
        Ansible4CloudifyManager_created:
          node: Ansible4CloudifyManager
          activity:
            set_state: created
          on-success:
            - Ansible4CloudifyManager_configuring
        Ansible4CloudifyManager_configuring:
          node: Ansible4CloudifyManager
          activity:
            set_state: configuring
          on-success:
            - configure_Ansible4CloudifyManager
        configure_Ansible4CloudifyManager:
          node: Ansible4CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - Ansible4CloudifyManager_configured
        Ansible4CloudifyManager_configured:
          node: Ansible4CloudifyManager
          activity:
            set_state: configured
          on-success:
            - Ansible4CloudifyManager_starting
        Ansible4CloudifyManager_starting:
          node: Ansible4CloudifyManager
          activity:
            set_state: starting
          on-success:
            - start_Ansible4CloudifyManager
        start_Ansible4CloudifyManager:
          node: Ansible4CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - Ansible4CloudifyManager_started
        Ansible4CloudifyManager_started:
          node: Ansible4CloudifyManager
          activity:
            set_state: started
          on-success:
            - CloudifyAwsConfiguration_initial
            - ChangeMaxMgmtWorkerPatch_initial
        HostPool_initial:
          node: HostPool
          activity:
            set_state: initial
          on-success:
            - HostPool_creating
        HostPool_creating:
          node: HostPool
          activity:
            set_state: creating
          on-success:
            - create_HostPool
        create_HostPool:
          node: HostPool
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - HostPool_created
        HostPool_created:
          node: HostPool
          activity:
            set_state: created
          on-success:
            - HostPool_configuring
        HostPool_configuring:
          node: HostPool
          activity:
            set_state: configuring
          on-success:
            - configure_HostPool
        configure_HostPool:
          node: HostPool
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - HostPool_configured
        HostPool_configured:
          node: HostPool
          activity:
            set_state: configured
          on-success:
            - HostPool_starting
        HostPool_starting:
          node: HostPool
          activity:
            set_state: starting
          on-success:
            - start_HostPool
        start_HostPool:
          node: HostPool
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - HostPool_started
        HostPool_started:
          node: HostPool
          activity:
            set_state: started
          on-success:
            - AWSHostpoolFeeder_configuring
        AWSHostpoolFeeder_initial:
          node: AWSHostpoolFeeder
          activity:
            set_state: initial
          on-success:
            - AWSHostpoolFeeder_creating
        AWSHostpoolFeeder_creating:
          node: AWSHostpoolFeeder
          activity:
            set_state: creating
          on-success:
            - AWSHostpoolFeeder_created
        AWSHostpoolFeeder_created:
          node: AWSHostpoolFeeder
          activity:
            set_state: created
          on-success:
            - HostPool_configuring
            - AWSHostpoolFeeder_configuring
        AWSHostpoolFeeder_configuring:
          node: AWSHostpoolFeeder
          activity:
            set_state: configuring
          on-success:
            - configure_AWSHostpoolFeeder
        configure_AWSHostpoolFeeder:
          node: AWSHostpoolFeeder
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - AWSHostpoolFeeder_configured
        AWSHostpoolFeeder_configured:
          node: AWSHostpoolFeeder
          activity:
            set_state: configured
          on-success:
            - AWSHostpoolFeeder_starting
        AWSHostpoolFeeder_starting:
          node: AWSHostpoolFeeder
          activity:
            set_state: starting
          on-success:
            - start_AWSHostpoolFeeder
        start_AWSHostpoolFeeder:
          node: AWSHostpoolFeeder
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - AWSHostpoolFeeder_started
        AWSHostpoolFeeder_started:
          node: AWSHostpoolFeeder
          activity:
            set_state: started
    uninstall:
      steps:
        Compute_uninstall:
          node: CFY_Compute
          activity:
            delegate: uninstall
        CloudifyManager_stopping:
          node: CloudifyManager
          activity:
            set_state: stopping
          on-success:
            - stop_CloudifyManager
        stop_CloudifyManager:
          node: CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - CloudifyManager_stopped
        CloudifyManager_stopped:
          node: CloudifyManager
          activity:
            set_state: stopped
          on-success:
            - CloudifyManager_deleting
        CloudifyManager_deleting:
          node: CloudifyManager
          activity:
            set_state: deleting
          on-success:
            - delete_CloudifyManager
        delete_CloudifyManager:
          node: CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - CloudifyManager_deleted
        CloudifyManager_deleted:
          node: CloudifyManager
          activity:
            set_state: deleted
          on-success:
            - Compute_uninstall
        CloudifyAwsConfiguration_stopping:
          node: CloudifyAwsConfiguration
          activity:
            set_state: stopping
          on-success:
            - stop_CloudifyAwsConfiguration
        stop_CloudifyAwsConfiguration:
          node: CloudifyAwsConfiguration
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - CloudifyAwsConfiguration_stopped
        CloudifyAwsConfiguration_stopped:
          node: CloudifyAwsConfiguration
          activity:
            set_state: stopped
          on-success:
            - CloudifyAwsConfiguration_deleting
        CloudifyAwsConfiguration_deleting:
          node: CloudifyAwsConfiguration
          activity:
            set_state: deleting
          on-success:
            - delete_CloudifyAwsConfiguration
        delete_CloudifyAwsConfiguration:
          node: CloudifyAwsConfiguration
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - CloudifyAwsConfiguration_deleted
        CloudifyAwsConfiguration_deleted:
          node: CloudifyAwsConfiguration
          activity:
            set_state: deleted
          on-success:
            - CloudifyManager_stopping
        AmqpClientPatch_stopping:
          node: AmqpClientPatch
          activity:
            set_state: stopping
          on-success:
            - stop_AmqpClientPatch
        stop_AmqpClientPatch:
          node: AmqpClientPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - AmqpClientPatch_stopped
        AmqpClientPatch_stopped:
          node: AmqpClientPatch
          activity:
            set_state: stopped
          on-success:
            - AmqpClientPatch_deleting
        AmqpClientPatch_deleting:
          node: AmqpClientPatch
          activity:
            set_state: deleting
          on-success:
            - delete_AmqpClientPatch
        delete_AmqpClientPatch:
          node: AmqpClientPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - AmqpClientPatch_deleted
        AmqpClientPatch_deleted:
          node: AmqpClientPatch
          activity:
            set_state: deleted
          on-success:
            - CloudifyManager_stopping
        ChangeMaxMgmtWorkerPatch_stopping:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: stopping
          on-success:
            - stop_ChangeMaxMgmtWorkerPatch
        stop_ChangeMaxMgmtWorkerPatch:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - ChangeMaxMgmtWorkerPatch_stopped
        ChangeMaxMgmtWorkerPatch_stopped:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: stopped
          on-success:
            - ChangeMaxMgmtWorkerPatch_deleting
        ChangeMaxMgmtWorkerPatch_deleting:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: deleting
          on-success:
            - delete_ChangeMaxMgmtWorkerPatch
        delete_ChangeMaxMgmtWorkerPatch:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - ChangeMaxMgmtWorkerPatch_deleted
        ChangeMaxMgmtWorkerPatch_deleted:
          node: ChangeMaxMgmtWorkerPatch
          activity:
            set_state: deleted
          on-success:
            - CloudifyManager_stopping
        Ansible4CloudifyManager_stopping:
          node: Ansible4CloudifyManager
          activity:
            set_state: stopping
          on-success:
            - stop_Ansible4CloudifyManager
        stop_Ansible4CloudifyManager:
          node: Ansible4CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - Ansible4CloudifyManager_stopped
        Ansible4CloudifyManager_stopped:
          node: Ansible4CloudifyManager
          activity:
            set_state: stopped
          on-success:
            - Ansible4CloudifyManager_deleting
        Ansible4CloudifyManager_deleting:
          node: Ansible4CloudifyManager
          activity:
            set_state: deleting
          on-success:
            - delete_Ansible4CloudifyManager
        delete_Ansible4CloudifyManager:
          node: Ansible4CloudifyManager
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - Ansible4CloudifyManager_deleted
        Ansible4CloudifyManager_deleted:
          node: Ansible4CloudifyManager
          activity:
            set_state: deleted
          on-success:
            - Compute_uninstall
        HostPool_stopping:
          node: HostPool
          activity:
            set_state: stopping
          on-success:
            - stop_HostPool
        stop_HostPool:
          node: HostPool
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - HostPool_stopped
        HostPool_stopped:
          node: HostPool
          activity:
            set_state: stopped
          on-success:
            - HostPool_deleting
        HostPool_deleting:
          node: HostPool
          activity:
            set_state: deleting
          on-success:
            - delete_HostPool
        delete_HostPool:
          node: HostPool
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - HostPool_deleted
        HostPool_deleted:
          node: HostPool
          activity:
            set_state: deleted
          on-success:
            - Compute_uninstall
        AWSHostpoolFeeder_stopping:
          node: AWSHostpoolFeeder
          activity:
            set_state: stopping
          on-success:
            - stop_AWSHostpoolFeeder
        stop_AWSHostpoolFeeder:
          node: AWSHostpoolFeeder
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - AWSHostpoolFeeder_stopped
        AWSHostpoolFeeder_stopped:
          node: AWSHostpoolFeeder
          activity:
            set_state: stopped
          on-success:
            - HostPool_stopping
            - AWSHostpoolFeeder_deleting
        AWSHostpoolFeeder_deleting:
          node: AWSHostpoolFeeder
          activity:
            set_state: deleting
          on-success:
            - delete_AWSHostpoolFeeder
        delete_AWSHostpoolFeeder:
          node: AWSHostpoolFeeder
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - AWSHostpoolFeeder_deleted
        AWSHostpoolFeeder_deleted:
          node: AWSHostpoolFeeder
          activity:
            set_state: deleted
          on-success:
            - Compute_uninstall
