tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.monitoring.grafana
  template_version: 1.0.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - tosca-normative-types:1.0.0-ALIEN14
  - org.alien4cloud.monitoring.backend:1.0.0-SNAPSHOT
  - org.alien4cloud.monitoring.graphite:1.0.0-SNAPSHOT
  - alien-base-types:1.4.0-SNAPSHOT

node_types:

  org.alien4cloud.monitoring.grafana.nodes.Grafana:
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: /images/grafana.png
    description: |
      Grafana frontend
    properties:
      component_version:
        type: version
        default: 4.1.2
        constraints:
          - valid_values: [ "4.1.2" ]  
    attributes:
      grafana_url: { concat: ["http://", get_attribute: [ SELF, public_ip_address ], ":", get_property: [ SELF, grafana_endpoint, port ]]}
    capabilities:
      grafana_endpoint:
        type: org.alien4cloud.monitoring.grafana.capabilities.GrafanaEndpoint
        occurrences: [0, UNBOUNDED]
        description: UI endpoint
        properties:
          protocol: http
          port: 3000 # set a default value for the port
          user: admin
          password: admin      
    requirements:
      - host: # Overrides the parent host requirement to add a specific node_filter and add OS constraints as Impl is based on yum and so restricted to centos.
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
          node_filter:
            capabilities:
              - tosca.capabilities.OperatingSystem:
                  properties:
                    - type: { equal: linux }
                    - architecture: { equal: x86_64 }
                    - distribution: { valid_values: [ "red hat", "centos", "rhel" ] }  
      # - metrics_backend:
      #     capability: org.alien4cloud.monitoring.backend.capabilities.MetricsBackendEndpoint
      #     relationship: org.alien4cloud.monitoring.grafana.relationships.GrafanaConnectToBackend
      #     occurrences: [0, UNBOUNDED]
      - graphite:
          capability: org.alien4cloud.monitoring.graphite.capabilities.GraphiteEndpoint
          relationship: org.alien4cloud.monitoring.grafana.relationships.GrafanaConnectToGraphite
          occurrences: [0, UNBOUNDED]

    interfaces:
      Standard:
        create:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: create.yml
          implementation: playbook/playbook.ansible
        start:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: start.yml
          implementation: playbook/playbook.ansible
        stop:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: stop.yml
          implementation: playbook/playbook.ansible
        delete:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: delete.yml
          implementation: playbook/playbook.ansible

capability_types:

  org.alien4cloud.monitoring.grafana.capabilities.GrafanaEndpoint:
    derived_from: tosca.capabilities.Endpoint     
    properties:
      user:
        type: string
        default: admin
        required: true
      password:
        type: string
        default: admin
        required: true

relationship_types:
  
  # org.alien4cloud.monitoring.grafana.relationships.GrafanaConnectToBackend:
  #   derived_from: tosca.relationships.ConnectsTo
  #   abstract: true
  #   valid_target_types: [ org.alien4cloud.monitoring.backend.nodes.MetricsBackend ]   
  org.alien4cloud.monitoring.grafana.relationships.GrafanaConnectToGraphite:
    # derived_from: org.alien4cloud.monitoring.grafana.relationships.GrafanaConnectToBackend
    derived_from: tosca.relationships.ConnectsTo
    properties:
      datasource_name:
        type: string
        required: true
        default: Graphite_DS
    valid_target_types: [ org.alien4cloud.monitoring.graphite.nodes.Graphite ] 
    interfaces:
      Configure:
        add_target:
          inputs:
            ANSIBLE_VERBOSE: true
            PLAYBOOK_ENTRY: connects_to_graphite.yml
            graphite_host: { get_attribute: [TARGET, graphite_ui, ip_address] }
            graphite_port: { get_property: [TARGET, graphite_ui, port]}
            grafana_port: { get_property: [SOURCE, grafana_endpoint, port]}
            grafana_user: { get_property: [SOURCE, grafana_endpoint, user]}
            grafana_password: { get_property: [SOURCE, grafana_endpoint, password]}
            datasource_name: { get_property: [SELF, datasource_name]}
          implementation: playbook/playbook.ansible
