tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.monitoring.diamond
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - tosca-normative-types:1.0.0-ALIEN14
  - alien-base-types:1.4.0-SNAPSHOT
  - org.alien4cloud.db.postgresql.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.lang.java.jmx.jolokia:1.4.0-SNAPSHOT
  - org.alien4cloud.messaging.rabbitmq.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.monitoring.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.storage.elasticsearch.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.a4c.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.automation.cloudify.manager.pub:1.4.0-SNAPSHOT

node_types:
  org.alien4cloud.monitoring.diamond.nodes.DiamondLinuxAgent:
    metadata:
      icon: /images/diamond.png
    description: |
      Deploy a Diamond Agent.
    derived_from: org.alien4cloud.monitoring.pub.nodes.MonitoringAgent
    # capabilities:
    #   elasticsearchHttpClient:
    #     type: org.alien4cloud.elasticsearch.capabilities.ElasticSearchHttpClient
    properties:
      # FIXME: find a way to get fro grafana endpoint
      # we should do stuff with grafite & grafana in pre_configure_source and register the datasource_name
      # then do stuff with collector in post_configure_source (and use the registered datasource_name)
      component_version:
        type: version
        default: 1.0.1
      datasource_name:
        type: string
        description: |
          The datasource that connects grafana to graphite.
          We need it to prepare grafana dashboards.
        required: true
        default: Graphite_DS
      collectors_path:
        type: string
        description: The path where the collector sources are (read only).
        required: true
        default: /opt/ansible_diamond/env/share/diamond/collectors
    requirements:
      # - graphite_backend:
      #     capability: org.alien4cloud.monitoring.backend.capabilities.GraphiteBackendEndpoint
      #     relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondLinuxAgentConnectsToGraphite
      #     occurrences: [0, unbounded]
      - data_endpoint:
          capability: org.alien4cloud.monitoring.pub.capabilities.GraphiteDataEndpoint
          relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondLinuxAgentConnectsToGraphite
          occurrences: [0, 1]
      - grafana:
          capability: org.alien4cloud.monitoring.pub.capabilities.GrafanaHttpEndpoint
          relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondLinuxAgentConnectsToGrafana
          occurrences: [0, 1]
      - collec_elasticsearch:
          capability: org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI
          relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondCollectElasticSearch
          occurrences: [0, 1]
      - collec_jolokia:
          capability: org.alien4cloud.lang.java.jmx.jolokia.capabilities.JolokiaEndpoint
          relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondJolokiaCollector
          occurrences: [0, 1]
      # - collec_a4c:
      #     capability: org.alien4cloud.lang.java.jmx.jolokia.capabilities.JolokiaEndpoint
      #     relationship: org.alien4cloud.monitoring.diamond.relationships.DiamondA4CCollector
      #     occurrences: [0, 1]
      - collec_rabbitmq:
          capability: org.alien4cloud.messaging.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint
          occurrences: [0, 1]
      - collec_postgresql:
          capability: org.alien4cloud.db.postgresql.pub.PostgresqlEndpoint
          occurrences: [0, 1]
      - collect_cloudify:
          capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint
          occurrences: [0, 1]
      - host:
          # limit to linux host
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
          node_filter:
            capabilities:
              - tosca.capabilities.OperatingSystem:
                  properties:
                    - type: { equal: linux }
                    - architecture: { equal: x86_64 }
    interfaces:
      Standard:
        create:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: create.yml
          implementation: playbook/playbook.ansible
        configure:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: configure.yml
            datasource_name: { get_property: [SELF, datasource_name] }
          implementation: playbook/playbook.ansible
        start:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: start.yml
          implementation: playbook/playbook.ansible
        stop:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: stop.yml
          implementation: playbook/playbook.ansible
        delete:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: delete.yml
          implementation: playbook/playbook.ansible

relationship_types:
  org.alien4cloud.monitoring.diamond.relationships.DiamondLinuxAgentConnectsToGraphite:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.monitoring.pub.capabilities.GraphiteDataEndpoint ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: connects_to_graphite.yml
            graphite_host: { get_attribute: [TARGET, data_endpoint, ip_address] }
            graphite_port: { get_attribute: [TARGET, data_endpoint, port]}
          implementation: playbook/playbook.ansible
  org.alien4cloud.monitoring.diamond.relationships.DiamondLinuxAgentConnectsToGrafana:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.monitoring.pub.capabilities.GrafanaHttpEndpoint ]
    interfaces:
      Configure:
        # pre_configure_source ?
        add_target:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: create_dashboards.yml
            grafana_url: { concat: [ get_attribute: [TARGET, http_endpoint, protocol], "://", get_attribute: [TARGET, http_endpoint, ip_address], ":", get_attribute: [TARGET, http_endpoint, port]] }
            grafana_user: { get_attribute: [TARGET, http_endpoint, user] }
            grafana_password: { get_attribute: [TARGET, http_endpoint, password] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.monitoring.diamond.relationships.DiamondCollectElasticSearch:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_elasticsearch.yml
            datasource_name: { get_property: [SOURCE, datasource_name] }
            elasticsearch_host: { get_attribute: [TARGET, http, ip_address] }
            elasticsearch_port: { get_attribute: [TARGET, http, port] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.monitoring.diamond.relationships.DiamondJolokiaCollector:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.lang.java.jmx.jolokia.capabilities.JolokiaEndpoint ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_jolokia.yml
            datasource_name: { get_property: [SOURCE, datasource_name] }
            jolokia_host: { get_attribute: [TARGET, ip_address] }
            jolokia_port: { get_attribute: [TARGET, jolokia, port] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.monitoring.diamond.relationships.DiamondA4CCollector:
    derived_from: org.alien4cloud.monitoring.diamond.relationships.DiamondJolokiaCollector
    valid_target_types: [ org.alien4cloud.automation.a4c.pub.capabilities.JolokiaA4CEndpoint ]
    interfaces:
      Configure:
        pre_configure_target:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_alien.yml
            datasource_name: { get_property: [SOURCE, datasource_name] }
            jolokia_host: { get_attribute: [TARGET, jolokia, ip_address] }
            alien_data_dir: { get_property: [TARGET, data_dir] }
            jolokia_port: { get_property: [TARGET, jolokia, port] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.monitoring.diamond.relationships.DiamondRabbitmqCollector:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.messaging.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_rabbitmq.yml
            datasource_name: { get_property: [SOURCE, datasource_name] }
            rabbitmq_port: { get_attribute: [TARGET, rabbitmq_management, port] }
            rabbitmq_user: { get_attribute: [TARGET, rabbitmq_management, user] }
            rabbitmq_password: { get_attribute: [TARGET, rabbitmq_management, password] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.monitoring.diamond.relationships.DiamondPostgresqlCollector:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.db.postgresql.pub.PostgresqlEndpoint ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_postgresql.yml
            datasource_name: { get_property: [SOURCE, datasource_name] }
            postgresql_port: { get_attribute: [TARGET, postgresql, port] }
            postgresql_user: { get_attribute: [TARGET, postgresql, user] }
            postgresql_password: { get_attribute: [TARGET, postgresql, password] }
          implementation: playbook/playbook.ansible
  org.alien4cloud.monitoring.diamond.relationships.DiamondCloudifyCollector:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: collect_cloudify.yml
            datasource_name: { get_property: [SOURCE, datasource_name] }
          implementation: playbook/playbook.ansible
        pre_configure_target:
          inputs:
            ANSIBLE_VERBOSE: false
            PLAYBOOK_ENTRY: install_cloudify_collector.yml
            collectors_path: { get_property: [SOURCE, collectors_path] }
          implementation: playbook/playbook.ansible
